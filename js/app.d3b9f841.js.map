{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","_x","_x2","_x3","_loadData","this","arguments","_callee","readFunction","fileString","type","regeneratorRuntime","wrap","_context","prev","next","sent","String","abrupt","stop","calculateScales","calculatedAtt","colorKeeper","keys","map","max","d3","rows","upperCI95","min","lowerCI95","realVal","field","yScale","range","domain","clamp","satScale","colorScale","catColor","scaleCat","fields","filter","f","stateColors","sc","state","color","scales","scaleName","matchLeaves","labels","leaves","leafChar","calculatedScales","mappedLeafLabels","x","leaf","label","leafCharIndex","node","V2","attr","chosenOne","indexOf","forEach","k","scaleOb","thisScale","states","scaleVal","scale","scaledHigh","scaledLow","attributes","matchEdges","edges","edgeLen","edge","attrKeys","index","edgeLength","res","estimate","undefined","row","normPaths","paths","att","root","nodeLabels","rootAttr","console","error","maxBranch","xScale","leafIndex","prevStep","assign","step","edgeMove","move","formatAttributeData","normedPaths","filterArray","path","winState","attrLabel","st","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","renderDistibutions","mainDiv","moveMetric","selectAll","remove","pathdata","filterMaster","dataMaster","log","attrHide","attribute","newNormed","distributionView_toConsumableArray","keysToHide","medBranchLength","normBins","Array","fill","base","top","binI","internalNodes","leafNodes","flatMap","sortedBins","mapNorm","bin","fData","leafAttr","leafData","v","histogram","thresholds","ticks","bins","maxO","minO","xO","histogramO","branches","colors","chosen","average","stDev","stUp","stDown","test","stat","append","classed","text","svg","branchScale","branchPoints","nodeLengthArray","nodeDuplicateCheck","eMove","bPointScale","pointGroups","join","binnedWrap","style","predictedWrap","branchGroup","continDist","on","list","y","select","lineGen","curve","y0","y1","dat","each","nodes","distrib","rangeRect","newy","discreteDist","combEdge","stateGroups","predictedWidth","lineGenD","observedWrap","contOb","contBars","height","xvalues","b","discOb","discBars","dRects","xPoint","padding","updateMainView","newData","main","drawPathsAndAttributes","removeFilter","filterId","newFilterMaster","addFilter","filterType","attType","filFunction","oldData","extra","filterOb","attributeType","filterFunction","before-data","ex","toggleFilters","filterButton","filterDiv","presentFilters","noShow","wrapper","labelGroups","toggle","shownToggs","togg","circle","toggleCircle","filterComponent_toConsumableArray","newKeys","hideKeys","newFilMaster","renderAttToggles","concat","selectWrapper","attButton","stateChange","attProps","selectedOption","options","optionArray","optKeys","button1","button2","submit","fromState","classList","toState","lastFilter","discreteFilter","filId","treeLinks","treeNode","nodeList","missingLinks","missingNodes","filterToolbar","button","span","xSpan","continRanges","ranges","brushBars","wrapperRect","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","predictedFilter","sort","observedFilter","continuousFilter","formater","datum","filterLine","fil","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","species","queryFilter","predicted","observed","numb","filterPred","filterObs","win","selectorDiv","selectId","dropDownWrapper","toolbarControl","toolbar","pathView","viewButton","lengthButton","scrunchButton","toggleScrunch","togglePathView","pathSelected","selectedPath","otherPaths","selectedDiv","selectedPaths_toConsumableArray","pathData","selectedSpecies","treeNodes","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrSortWrap","radioDiv","radio","sorted","a","high","leafOther","highLeaves","low","lowLeaves","same","svgTest","selectWrap","selectedGroups","renderPaths","nearest","nodearray","attributeWrapper","attData","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","renderSelectedView","sortedPaths","chosenPath","pathIndex","distance","sortOtherPaths","collapsed","pathGroups","attKeys","attrMove","predictedAttrGrps","attributeHeight","attribWrap","sizeAndMove","pathWrapTest","pathWrap","branchFrequency","reduce","acc","curr","circleScale","values","notIt","string","charAt","toUpperCase","timelines","nodeGroups","hovers","innerTimeline","innerPaths","change","continuousAtt","innerBars","continuousPaths","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","tool","transition","duration","html","pageX","pageY","endStateDot","buildTreeStructure","getNested","children","V1","updateBrush","treeBrush","_this","sidebar","toolbarDiv","treeFilter","brushId","attributType","sidebarComponent_toConsumableArray","_ref","mark","renderTreeButtons","nestedData","treeButton","treeViewButton","renderTree","selectedNodes","no","id","margin","width","treemap","size","addingEdgeLength","chil","treenodes","g","descendants","parent","then","edgeSource","matchedLeaves","matchedEdges","unique","self","t0","t1","t2","t3","awesomeness","island","SVL","ecomorph"],"mappings":"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","file":"js/app.d3b9f841.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([132,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n           // console.log(calculatedAtt[d].type, max, min, calculatedAtt)\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n         leaf.label = mappedLeafLabels[i];\n        \n         let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n     \n         leaf.node = leaf.V2;\n         let keys = calculatedScales.map(m=> m.field);\n         let attr = {};\n         \n         let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n         keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                     return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                 });\n             \n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n \n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                    res.scaleVal = scale(res.estimate);\n                    res.scaledLow = scale(res.lowerCI95);\n                    res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                        return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function normPaths(paths, calculatedAtt, calculatedScales){\n    paths.forEach((p, i)=> {\n        p[0].attributes = {};\n        Object.keys(calculatedAtt).map(att=> { \n            if(calculatedAtt[att].type == 'continuous'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                p[0].attributes[att] = {};\n                let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n                p[0].attributes[att].scaleVal =  scale(root.estimate);\n                p[0].attributes[att].scaledLow =  scale(root.lowerCI95);\n                p[0].attributes[att].scaledHigh =  scale(root.upperCI95);\n                p[0].attributes[att].realVal = root.estimate;\n                p[0].attributes[att].upperCI95 = root.upperCI95;\n                p[0].attributes[att].lowerCI95 = root.lowerCI95;\n                p[0].attributes[att].scale = scale;\n                p[0].attributes[att].type = 'continuous';\n            }else if(calculatedAtt[att].type == 'discrete'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n                let rootAttr = scales.map(s=> {\n                    return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n                });\n                p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n            }else{\n                console.error('type not found');\n            }\n        });\n    });\n    \n    let maxBranch = d3.max(paths.map(r=> r.length));\n\n    //SCALES for X, Y /////\n    let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n    let normedPaths = paths.map((p, i)=> {\n        p.xScale = xScale.domain([0, maxBranch - 1]);\n     \n        let leafIndex = p.length - 1;\n        let lengths = p.map(l=> l.edgeLength);\n        let prevStep = 0;\n        return p.map((m, j)=> {\n            let node = Object.assign({}, m);\n            //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n            let step = node.edgeLength + prevStep;\n            node.edgeMove = (j < leafIndex) ? step : 1;\n            prevStep = prevStep + node.edgeLength;\n         \n            node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n            return node;\n        });\n    });\n\n    return normedPaths;\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(normedPaths, scales, filterArray){\n  \n    let keys = (filterArray == null)? Object.keys(normedPaths[0][0].attributes): filterArray;\n   \n    let newData = normedPaths.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.move;\n                    m.attributes[key].edgeMove = m.edgeMove;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = scales.filter(s=> s.field === key)[0].yScale;\n                    m.attributes[key].satScale = scales.filter(s=> s.field === key)[0].satScale;\n                    m.attributes[key].colorScale = scales.filter(s=> s.field === key)[0].colorScale;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let state = m.attributes[key];\n                        state.winState = m.attributes[key].states.filter(f=> f.realVal === 1)[0].state;\n                        state.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === state.winState)[0].color;\n                        state.move = m.move;\n                        state.edgeMove = m.edgeMove;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : m.attributes[key];//.filter(f => f.state != undefined);\n                        return states.map((st, j)=> {\n                            st.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === st.state)[0].color;\n                            st.move = m.move;\n                            st.edgeMove = m.edgeMove;\n                            st.attrLabel = key;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n        if(notEmpty(node.children)){\n            pathArray.push(node);\n            pullPath([...pathArray], node.children, arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node_data['node name']);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, node]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function renderDistibutions(mainDiv, scales, moveMetric){\n\n    mainDiv.selectAll('*').remove();\n\n    let pathdata = (filterMaster.length > 0)? filterMaster[filterMaster.length - 1].data : dataMaster[0];\n\n    console.log(pathdata)\n\n    let observedWidth = 200;\n    let predictedWidth = 800;\n    let height = 90;\n    let margin = 20;\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    let keys = Object.keys(pathdata[0][0].attributes).filter(f=> attrHide.indexOf(f) === -1);\n    let newNormed = [...pathdata];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    console.log(keys, keysToHide)\n\n    formatAttributeData(newNormed, scales, keysToHide);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n    let medBranchLength = d3.median(newNormed.map(p=> p.length)) - 1;\n\n    let normBins = new Array(medBranchLength + 1).fill().map((m, i)=> {\n        let step = 1 / medBranchLength;\n        let base = (i > 0) ? ((i - 1) * step) : 0;\n        let top = (i * step);\n        return {'base': base, 'top': top, 'binI': i }\n    });\n   \n    let internalNodes = newNormed.map(path => path.filter(node=> node.leaf != true));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            if(i === 0){\n                return node.edgeLength === 0;\n            }else{\n                return node.edgeMove > n.base && node.edgeMove <= n.top;\n            }\n        } ));\n        n.data = edges;\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n        let mapNorm = normBins.map(bin => {\n\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = bin.data = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n\n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr}\n   \n        if(scale.type === 'continuous'){\n            let max = d3.max(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n            let min = d3.min(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n            let x = d3.scaleLinear().domain([min, max]).range([0, height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.forEach(n=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                n.domain = [max, min]\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> v.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> v.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, height])\n\n            let histogramO = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData}\n            return newK;\n\n        }else{\n\n            let states = leafAttr[0].states;\n            mapNorm.bins = null\n            leafData.bins = states.map(s=> leafAttr.filter(f=> f.winState === s.state));\n            let x = d3.scaleLinear().domain([0, 1]).range([0, height]);\n            \n            mapNorm.map(n=> {\n                n.type = scale.type;\n                let colors = scale.stateColors;\n                n.bins = states.map(state=> {\n                    let color = colors.filter(f=> f.state === state.state);\n                  \n                    let chosen = n.data.flatMap(m=> m.states.filter(f=> f.state === state.state)).map(v=> v.realVal);\n                    let average = d3.mean(chosen);\n                    let stDev = d3.deviation(chosen);\n                    return {'state': state.state, 'average': average, 'stUp': average + stDev, 'stDown': average - stDev, 'color': color[0].color, 'range': n.range }\n                });\n                \n                return n;\n            });\n\n            let test = states.map(stat=> {\n                let key = stat.state;\n                return mapNorm.flatMap(m=> {\n                    return m.bins.filter(f=> f.state === key);\n                });\n            });\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData, 'states': test}\n            return newK;\n        }\n    });\n\n    ///////RENDERING//////////\n\n    let dataCount = mainDiv.append('div').classed('species-count', true);\n    dataCount.append('text').text(\"Shown: \"+ pathdata.length + \" /\"+ dataMaster[0].length);\n\n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n    svg.attr('height', (keys.length * (height + 25)));\n\n    let branchScale = d3.scaleLinear().domain([0, medBranchLength]).range([0, 780]);\n\n    let branchPoints = svg.append('g').classed('branch-bar', true).attr('transform', 'translate(10, 20)');\n    branchPoints.append('line').attr('y0', 2).attr('y1', 2).attr('x0', '210').attr('x1', 890).attr('stroke', 'gray').attr('stroke-width', .25)\n    branchPoints.append('text').text('Root').attr('transform', 'translate(50, 7)');\n    branchPoints.append('text').text('Leaves').attr('transform', 'translate(950, 7)');\n\n    let wrap = svg.append('g').classed('summary-wrapper', true);\n    wrap.attr('transform', 'translate(10, 50)');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = []\n\n    newNormed.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.edgeMove });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, 1]).range([0, 795]);\n    let pointGroups = branchPoints.selectAll('g.branch-points').data(nodeLengthArray).join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n    pointGroups.attr('transform', (d, i) => 'translate('+(105 + bPointScale(d.eMove))+', 0)');\n    pointGroups.append('circle').attr('r', 5).attr('fill', \"rgba(123, 141, 153, 0.5)\");\n\n    let binnedWrap = wrap.selectAll('.attr-wrap').data(sortedBins).join('g').attr('class', d=> d.key + ' attr-wrap');\n    binnedWrap.attr('transform', (d, i)=>  'translate(0,'+(i * (height + 5))+')');\n    \n    let label = binnedWrap.append('text').text(d=> d.key).attr('y', 40).attr('x', 80).style('text-anchor', 'end');\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n\n    let pathGroup = predictedWrap.append('g').classed('path-wrapper', true);\n\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> d.branches).join('g').classed('branch-bin', true);\n    branchGroup.attr('transform', (d, i)=> 'translate('+(100 + branchScale(i))+', 0)');\n\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        let list = d.data.map(m=> m.nodeLabels);\n        let selected = pointGroups.filter(p=> list.indexOf(p.node) > -1).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > 0).classed('selected-branch', true);\n        let y = d3.scaleLinear().domain(d.domain).range([0, height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    var lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let y = d3.scaleLinear().domain([0, 16]).range([0, height]);\n        return y(i); \n    })\n    .y0(d=> {\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 80]).clamp(true);\n        return x(0);\n    })\n    .y1(d=> {\n        let dat = Object.keys(d).length - 1\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 80]).clamp(true);\n        return x(dat); \n    });\n\n    continDist.each((d, i, nodes)=> {\n       \n        let distrib = d3.select(nodes[i]).selectAll('g').data([d.bins]).join('g').classed('distribution', true);\n        distrib.attr('transform', 'translate(11, '+height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', \"rgba(133, 193, 233, .9)\");\n    });\n\n    let contRect = continDist.append('rect').attr('height', height).attr('width', 10).style('fill', 'none').style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.yScale != undefined){\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return newy(d.lowerCI95) - newy(d.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.upperCI95)+')'\n    });\n\n    rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].yScale;\n            newy.range([height, 0]);\n            let mean = d3.mean(d.data.map(m=> m.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n    let discreteLine = discreteDist.append('line').attr('x0', 2).attr('x1', 2).attr('y0', 0).attr('y1', height).attr('stroke', 'gray').attr('stroke-width', 0.5);\n    let hoverRect = discreteDist.append('rect').attr('height', height).attr('width', 10).attr('opacity', 0);\n    discreteDist.on('mouseover', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([1, 0]).range([0, height]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        let selected = pointGroups.filter(f=> f.eMove >= d.range[0] && f.eMove < d.range[1]).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n      \n        treeNode.filter(node=> node.data.combEdge >= d.range[0] && node.data.combEdge < d.range[1]).classed('selected-branch', true);\n      //  let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > 0).classed('selected-branch', true);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('.y-axis').remove();\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n    })\n\n    let discreteBinWrap = predictedWrap.filter(f=> f.type === 'discrete');\n   \n    let stateGroups = discreteBinWrap.selectAll('.path-wrapper').selectAll('g.state').data(d=> d.states).join('g').classed('state', true);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGenD = d3.area()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y0(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.stDown);\n        })\n        .y1(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.stUp); \n        });\n        return lineGenD(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGen = d3.line()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.average); \n        });\n        return lineGen(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', 'none').attr('stroke', (d, i)=> {\n        return d[0].color;\n    });\n\n\n\n    ////OBSERVED CONTIUOUS/////\n\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', 'translate('+ (predictedWidth + 150) +', 0)')\n\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        return y(Object.keys(d).length - 2)\n    }).attr('fill', 'rgba(133, 193, 233, .5)');\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        let movey = height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n        let xvalues = d.leafData.data.map(m=> m.realVal);\n        let x = d3.scaleLinear().domain([d3.min(xvalues), d3.max(xvalues)]).range([0, observedWidth])\n        let y = d3.scaleLinear().domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2]).range([(height - margin), 0]);\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(x)).attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y)).attr('transform', 'translate(0, '+margin+')');\n    });\n    \n////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, 100]).range([(height -margin), 0])\n        return y(d.length)\n    }).attr('fill', (d, i) => d[0].color).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0])\n        let movey = (height) - y(d.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n  \n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> f[0].state === d[0].winState).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n     \n    })\n\n    discOb.each((d, i, nodes)=> {\n            let labels = d.leafData.bins.map(b=> b[0].winState)\n            let xPoint = d3.scalePoint().domain(labels).range([0, observedWidth]).padding(.6)\n            let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0]);\n            d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5)).attr('transform', 'translate(0, '+margin+')');\n            d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n    });\n}\n","import * as d3 from \"d3\";\nimport { renderDistibutions } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\n\nexport function updateMainView(newData, scales, moveMetric){\n    let main = d3.select('#main');\n\n    if(d3.select('#view-toggle').text() === 'View Paths'){\n        renderDistibutions(main, scales, moveMetric)\n    }else{\n        drawPathsAndAttributes(newData, main, scales, moveMetric);\n    }\n\n}","import '../styles/index.scss';\nimport {formatAttributeData, calculateScales} from './dataFormat';\nimport {renderAttributes,  drawContAtt, drawDiscreteAtt, renderPaths, drawPathsAndAttributes, sizeAndMove} from './renderPathView';\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId){\n\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, normedPaths, main, moveMetric, scales){\n    let filterDiv = d3.select('#filter-tab');\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        renderAttToggles(filterDiv, normedPaths, main, scales, 'edgeLength');\n        stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales);\n        queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], ['state', [fromState, toState]]);\n\n                    ////DRAW THE PATHS\n                    drawPathsAndAttributes(test, main, scales, moveMetric);\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    let filterToolbar = d3.select(\"#toolbar\");\n\n                    let button = filterToolbar.append('button').classed('btn btn-info', true);\n                    let span = button.append('span').classed('badge badge-light', true);\n                    span.text(test.length);\n                    button.append('h6').text(fromState);\n                    button.append('i').classed('fas fa-arrow-right', true);\n                    button.append('h6').text(toState + '  ');\n                   \n                    let xSpan = button.append('i').classed('close fas fa-times', true);\n                    xSpan.on('click', ()=> {\n                        removeFilter(filId);\n                        updateMainView(data, scales, 'edgeLength')\n                        d3.selectAll('.link-not-there').classed('link-not-there', false);\n                        d3.selectAll('.node-not-there').classed('node-not-there', false);\n                        button.remove();\n                    });\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['ranges', [predictedFilter, observedFilter]], 'attribute', selectedOption]);\n\n                    console.log('fm', filterMaster)\n\n                    ////DRAW THE PATHS\n                 \n                    updateMainView(test, scales, moveMetric)\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    let filterToolbar = d3.select(\"#toolbar\");\n\n                    let formater = d3.format(\".2s\");\n\n                    let button = filterToolbar.append('button').classed('btn btn-info', true);\n                    d3.select(button).datum(filterOb);\n                    let span = button.append('span').classed('badge badge-light', true);\n                    span.text(test.length);\n                    let label = button.append('h6').text(selectedOption + \"  Predicted: \"+ formater(predictedFilter[0]) + \"-\" + formater(predictedFilter[1]) + \" Observed: \" + formater(observedFilter[0]) + \"-\" + formater(observedFilter[1]));\n                    let xSpan = label.append('i').classed('close fas fa-times', true);\n                    xSpan.on('click', ()=> {\n                       \n                        let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> filterOb.attribute != f.attribute);\n                      \n                        let thisData = dataMaster[0];\n                        filterLine.forEach(fil=> {\n                            console.log(fil);\n                        });\n\n                        drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                        ////removeing the dimmed class to the unfilterd paths////\n                        d3.selectAll('.link-not-there').classed('link-not-there', false);\n                        d3.selectAll('.node-not-there').classed('node-not-there', false);\n                        button.remove();\n                    });\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n    \n}\n\nfunction discreteFilter(data, selectedOption, fromState, toState){\n\n    return data.filter(path=> {\n        let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n            let states = node.attributes[selectedOption].states;\n            if(fromState === 'Any'){\n                return true;\n            }else{\n                return states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n            }\n        });\n        let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n          let win = node.attributes[selectedOption].winState;\n          if(toState === 'Any'){\n              return true;\n          }else{\n              return win === toState;\n          }\n        });\n        return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n    });\n\n}\n\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n            drawPathsAndAttributes(test, main, scales, moveMetric);\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, main, scales, moveMetric){\n\n    ////NEED TO GET RID OF TOGGLE SVG\n    let keys = Object.keys(normedPaths[0][0].attributes);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n   \n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n\n        console.log('filtermaster in render att toggles', filterMaster)\n        updateMainView(normedPaths, scales, moveMetric)\n\n        ////DRAW THE PATHS\n       // drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport {toggleFilters} from './filterComponent';\nimport {renderDistibutions} from './distributionView';\nimport {dataMaster, collapsed} from './index';\n\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, moveMetric, pathView){\n\n    let viewButton = toolbar.append('button').attr('id', 'view-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n\n    if(pathView === 'paths'){\n        viewButton.text('View Summary');\n    }else if(pathView === 'summary'){\n        viewButton.text('View Paths');\n    }else{\n        console.error('pathView parameter not found');\n    }\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, normedPaths, main, moveMetric, calculatedScales));\n\n    let lengthButton = toolbar.append('button').attr('id', 'change-length').attr('class', 'btn btn-outline-secondary');\n    if(moveMetric === 'move'){\n        lengthButton.text('Show Edge Length');\n    }else if(moveMetric === 'edgeLength'){\n        lengthButton.text('Normalize Edge Length');\n    }\n\n    lengthButton.on('click', ()=> {\n        if(lengthButton.text() === 'Show Edge Length'){\n            lengthButton.text('Normalize Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n            }else{\n                renderDistibutions(main, calculatedScales, 'edgeLength');\n            }\n        }else{\n            lengthButton.text('Show Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n            }else{\n                renderDistibutions(main, calculatedScales, moveMetric);\n            }\n        }\n    });\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, normedPaths, main, calculatedScales));\n    viewButton.on('click', ()=> togglePathView(viewButton, normedPaths, main, calculatedScales, moveMetric));\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, normedPaths, main, calculatedScales){\n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n    }\n}\n\n/**\n * \n * @param {*} viewButton button that changes the actual view the text of the button determines what the view should change to \n * @param {*} normedPaths \n * @param {*} main \n * @param {*} calculatedScales \n */\nfunction togglePathView(viewButton, normedPaths, main, calculatedScales, moveMetric){\n   \n    if(viewButton.text() === 'View Paths'){\n        viewButton.text('View Summary');\n        main.selectAll('*').remove();//.selectAll('*').remove();\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n    }else{\n        viewButton.text('View Paths');\n        main.selectAll('*').remove();\n        renderDistibutions(main, calculatedScales, moveMetric);\n    }\n}\n\n\n\n\n\n","import * as d3 from \"d3\";\nimport {branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes} from './renderPathView';\nimport {formatAttributeData} from './dataFormat';\nimport {renderAttToggles} from './toolbarComponent';\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function pathSelected(selectedPath, otherPaths, scales, moveMetric){\n\n    let selectedDiv = d3.select('div#selected');\n    if(selectedPath === null){\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, moveMetric, false);\n    }else{\n        renderSelectedView([selectedPath], otherPaths, selectedDiv, scales, moveMetric);\n        let sortedPaths = sortOtherPaths([...selectedPath], otherPaths);\n        let main = d3.select('div#main');\n          /// LOWER ATTRIBUTE VISUALIZATION ///\n        drawPathsAndAttributes(sortedPaths.map(s=> s.data), main, scales, moveMetric, false);\n  \n        main.style('padding-top', '250px');\n    }\n}\nexport function sortOtherPaths(pathData, otherPaths){\n\n    let thisSpecies = pathData.filter(f=> f.leaf)[0];\n    let chosenPath = pathData.reverse().map(m=> m.node);\n    \n    let rankedPaths = otherPaths.map(path=> {\n        let step = 0;\n        let test = path.reverse().map((node, i)=> {\n            if(chosenPath.indexOf(node.node));\n            return {'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n        }).filter(f=> f.indexOf > -1);\n        let distance = (test[0].indexOf + test[0].pathIndex);\n        return {'data':path.reverse(), 'distance': distance };\n\n    });\n    let sortedData = rankedPaths.sort(function(a, b){return a.distance - b.distance;});\n    return sortedData;\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales, moveMetric){\n\n    let selectedSpecies = pathData.flatMap(p=> p.filter(f=> f.leaf === true).map(n=> n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node=> selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n   ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc=> {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m=> m.field) : null;\n\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    let xIconWrap = selectedTool.append('div').classed('x-icon', true);\n    let xIcon = xIconWrap.append('i').classed(\"far fa-times-circle\", true);\n    xIcon.on('click', ()=> {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        \n        pathSelected(null, dataMaster[0], scales, moveMetric);\n    });\n\n    ///////////////////////\n\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', ()=> sortPaths(sortByDistanceButton));\n    \n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m=> m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n   let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n   let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d=> d).attr('id', (d, i)=> 'radio-'+i).classed(\"form-check-input\", true);\n   radioDiv.append('label').text(d=> d).property('for', (d, i)=> 'radio-'+i).classed(\"form-check-label\", true);\n\n   radio.on('click', (d, i)=> {\n    let leaf = pathData.map(node=> node.filter(d=> d.leaf === true)[0])[0];\n    let sorted = [...otherPaths].sort(function(a, b){\n        return a.filter(n=> n.leaf === true)[0].attributes[d].realVal - b.filter(n=> n.leaf === true)[0].attributes[d].realVal;\n    });\n\n    let main = d3.select('div#main');\n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n    main.style('padding-top', '250px');\n\n    let paths = main.select('svg#main-path-view').selectAll('.paths');\n\n    let high = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n    });\n    high.classed('high', true);\n\n    let highLeaves = high.data().map(path=> path.filter(f=> f.leaf === true)[0].node);\n    \n    treeNodes.filter(f=> highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n\n    let low = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n    });\n    low.classed('low', true);\n\n    let lowLeaves = low.data().map(path=> path.filter(f=> f.leaf === true)[0].node);\n\n    treeNodes.filter(f=> lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n\n    let same = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n    });\n    same.classed('same', true);\n});\n   /////////////////////////////////////////////////\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty()? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    let selectWrap = svg.append('g').classed('select-wrap', true);\n\n    let selectedGroups = renderPaths(pathData, selectWrap, scales, moveMetric);\n    selectedGroups.attr('transform', (d, i)=> 'translate(0,'+(i*60)+')');\n\n    let nodes = selectedGroups.select('.time-line').selectAll('.node');\n    nodes.on('mouseover', (d, i)=> {\n      \n        let nearest = otherPaths.filter(path=> {\n            let nodearray = path.flatMap(f=> f.node);\n            return nodearray.indexOf(d.node) > -1;\n        });\n       \n        let nearestA = nearest[0];\n        let nearestB = nearest[1];\n    });\n\n    //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n       /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n    let attData = formatAttributeData(pathData, scales, attrFilter);\n    let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n      \n    let attributeHeight = 45;\n    selectedGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (Object.keys(d[1].attributes).length + 1))) +')');\n    \n    drawContAtt(attributeGroups);\n    drawDiscreteAtt(attributeGroups, scales);\n\n    //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n    //tranforming elements\n    svg.style('height', ((pathData.length + attributeGroups.data().map(m=> m[0]).length)* 250) + 50 + 'px');\n    selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m=> m[0]).length)* 45) + 50 + 'px');\n    attributeWrapper.attr('transform', (d)=> 'translate(140, 25)');\n\n    d3.selectAll('.selected-path').classed('selected-path', false);\n\n    ////NEED TO GENERALIZE BRANCH FUNCTION IN RENDER TO WORK HERE\n\n    return svg;\n}\n\nfunction sortPaths(sortButton){\n    if(sortButton.text() === 'Sort Most to Least'){\n        sortButton.text('Sort Least to Most');\n    }else{\n        sortButton.text('Sort Most to Least');\n    }\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {renderSelectedView, pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric){\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(normedPaths, main, calculatedScales, moveMetric);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let attData = formatAttributeData(normedPaths, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (attrMove + 1))) +')');\n    \n    drawContAtt(predictedAttrGrps, moveMetric, collapsed);\n    drawDiscreteAtt(predictedAttrGrps, calculatedScales, moveMetric, collapsed);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, normedPaths, (attrMove * attributeHeight))\n\n}\n\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\n\nexport function renderPaths(pathData, main, scales, moveMetric){\n    \n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n     let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n \n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n    pathGroups.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales, moveMetric);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected(d, notIt.data(), scales, moveMetric);\n        }\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       // let string = d[d.length - 1].label\n       let string = d.filter(f=> f.leaf === true)[0].label;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 10).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> d).join('g').classed('node', true);\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 10)';});\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n      \n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n  \n}\n\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> data[i]).join('g');\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n    return predictedAttrGrps;\n}\n\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\n\nasync function continuousPaths(innerTimeline, moveMetric, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path, moveMetric);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? 20 : 45;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\n\nexport function drawContAtt(predictedAttrGrps, moveMetric, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return d[0].type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? 20 : 45;\n    let attrLabel = continuousAtt.append('text').text(d=> d[0].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);//.data(normedPaths);//.attr('transform', (d, i)=> 'translate(0, 0)');\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n   // attributeNodesCont = attrNodesContEnter.merge(attributeNodesCont);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, moveMetric, collapsed);\n ////////\n\n    let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    innerRect.attr('height', attributeHeight);\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', 20).attr('height', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.lowerCI95) - y(d.upperCI95);\n        let barHeight = (collapsed === 'true') ? 20 : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', 20).attr('height', 5)\n        .attr('transform', (d, i)=> {\n            let y = d.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.realVal) +')';})\n        .attr('fill', d=> d.color);\n    }\n   \n}\n\nexport function drawDiscreteAtt(predictedAttrGrps, scales, moveMetric, collapsed){\n\n  \n    \n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let attrLabel = discreteAtt.append('text').text(d=> d[d.length - 1].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        let disct = d.map(m=> {\n           \n            let test = (m.leaf == true) ? m.states.map(s=> {\n                s.move = m.move;\n                s.edgeMove = m.edgeMove;\n                s.color = m.color;\n                return s;\n            }) : m;\n            return test;\n        });\n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n            return disct.map(m=> m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance + 7;})\n    .y(d=> {\n       \n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        //d.scaleVal\n        return y(d.realVal);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;});\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);//.data(normedPaths);//.attr('transform', (d, i)=> 'translate(0, 0)');\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g').classed('attribute-node-discrete', true);\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        if(d[0]){\n            let distance = (moveMetric === 'move') ? d[0].move : x(d[0].edgeMove);\n            return 'translate('+distance+', 0)';\n        }else{\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n    let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n        return d;\n    }).join('circle').classed('dots', true);\n    \n    stateDots.attr('cx', 10).attr('cy', (d)=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n        return y(d.realVal);\n    }).attr('r', 2).style('fill', d=> d.color);\n\n    stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n\n    stateDots.on(\"mouseover\", function(d) {\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html(d.state + \": \" + f(d.realVal))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        })\n      .on(\"mouseout\", function(d) {\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n        });\n\n    let endStateDot = attributeNodesDisc.filter((att, i)=> {\n        return att[0] === undefined;});\n\n    endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n       return d.color;\n    });\n    ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n\n    endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(15, 17)').style('font-size', 10);\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {renderSelectedView, pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {dataMaster} from './index';\nimport {filterMaster, removeFilter, addFilter} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport {getNested} from './pathCalc';\n\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges.rows);\n    return nestedData;\n}\n\nfunction updateBrush(treeBrush, scales){\n    let sidebar = d3.select('#sidebar');\n    let toolbarDiv = d3.select('#toolbar');\n\n    let data = filterMaster.length === 0 ? dataMaster[0] : dataMaster[0];\n\n    let nodes = sidebar.select('svg').select('g').selectAll('.node');\n    let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n\n    let filterArray = selectedNodes.data().map(n=> n.data.node);\n  \n    let test = treeFilter(data, filterArray);\n\n    let brushId = 'brush-'+ filterMaster.filter(f=> f.attributType === 'topology').length;\n\n    let filterOb = addFilter('data-filter', 'topology', brushId, treeFilter, [...data], [...test], null);\n\n    console.log('fm', filterMaster)\n\n    updateMainView(test, scales, 'edgeLength');\n   \n     ///DIMMING THE FILTERED OUT NODES//////\n\n    ////Class Tree Links////\n    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n    d3.selectAll('.link-not-there').classed('link-not-there', false);\n    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingLinks.classed('link-not-there', true);\n\n    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingNodes.classed('node-not-there', true);\n\n    ///END NODE DIMMING///////\n\n    let button = toolbarDiv.append('button').classed('btn btn-info', true);\n    let span = button.append('span').classed('badge badge-light', true);\n    span.text(test.length);\n    let label = button.append('h6').text('Tree Filter');\n\n    let xSpan = label.append('i').classed('close fas fa-times', true);\n    xSpan.on('click', async (d, i, n)=> {\n        removeFilter(brushId);\n        await updateMainView(data, scales, 'edgeLength');\n        d3.selectAll('.selected').classed('selected', false);\n        d3.selectAll('.link-not-there').classed('link-not-there', false);\n        d3.selectAll('.node-not-there').classed('node-not-there', false);\n        button.remove();\n        d3.select(this).call(treeBrush.move, null);\n        d3.select('.tree-brush').remove();\n    });\n}\n\nexport function renderTreeButtons(nestedData, normedPaths, calculatedScales, sidebar){\n    ///SIDBAR STUFF\n    let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n   // let treeBrush = d3.brush().extent([[0, 0], [400, 600]]);\n   let treeBrush = d3.brush().extent([[0, 0], [400, 600]]).on('end', (d, i, n) => updateBrush(treeBrush, calculatedScales));\n    treeButton.on('click', ()=> {\n        let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Show Lengths').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n  \n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n            renderTree(nestedData, normedPaths, calculatedScales, sidebar, true);\n            treeViewButton.text('Hide Lengths');\n       }else{\n            renderTree(nestedData, normedPaths, calculatedScales, sidebar, false);\n            treeViewButton.text('Show Lengths');\n       }\n    });\n}\n\nfunction treeFilter(data, selectedNodes){\n    return data.filter(path=> {\n        let nodeNames = path.map(no=> no.node);\n        let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n        return booArray.indexOf(true) > -1\n    });\n}\n\nexport function renderTree(nestedData, normedPaths, calculatedScales, sidebar, length){\n\n    // set the dimensions and margins of the diagram\n    var margin = {top: 10, right: 90, bottom: 50, left: 20},\n    width = 400 - margin.left - margin.right,\n    height = 700 - margin.top - margin.bottom;\n\n// declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([height, width]);\n  //  console.log('nested', nestedData)\n    function addingEdgeLength(edge, data){\n        data.combEdge = data.edgeLength + edge;\n        if(data.children){\n            data.children.forEach(chil=> {\n                addingEdgeLength(data.combEdge, chil);\n            });\n        }\n    }\n    addingEdgeLength(0, nestedData)\n\n//  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData);\n\n// maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, width]).clamp(true);\n\n    var treeSvg = sidebar.append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom),\n    g = treeSvg.append(\"g\")\n    .attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// adds the links between the nodes\n    var link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", function(d) {\n        if(length){\n            return \"M\" + xScale(d.data.combEdge) + \",\" + d.x\n            + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.x\n            + \" \" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.parent.x\n            + \" \" + xScale(d.parent.data.combEdge) + \",\" + d.parent.x;\n        }else{\n            return \"M\" + d.y + \",\" + d.x\n            + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n            + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n            + \" \" + d.parent.y + \",\" + d.parent.x;\n        }       \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants())\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); })\n    .attr(\"transform\", function(d) { \n   \n        if(length){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + d.x + \")\"; \n        }else{\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; \n        }\n    \n    //return \"translate(\" + d.y + \",\" + d.x + \")\"; \n});\n\n    // adds the circle to the node\n    node.append(\"circle\")\n    .attr(\"r\", 3);\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n    });\n\n    return node;\n/////END TREE STUFF\n///////////\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, matchLeaves, matchEdges, normPaths, filterKeeper} from './dataFormat';\nimport {allPaths, pullPath, getPath} from './pathCalc';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {renderDistibutions} from './distributionView';\nimport {toolbarControl, renderAttToggles} from './toolbarComponent';\n\nexport const dataMaster = [];\nexport const collapsed = false;\n\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\n\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n\nloadData(d3.json, './public/data/anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edgeLen = await loadData(d3.json, './public/data/anolis-edge-length.json', 'edge');\n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.V1);\n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.V2) == -1 );\n\n    let leafChar = await loadData(d3.json, './public/data/anolisLeafChar.json', '');\n\n    let labels = await loadData(d3.json, './public/data/anolis-labels.json', '');\n\n\n    ///MAKE A ESTIMATED SCALES THING\n    let calculatedAtt = {\n        'awesomeness' : await loadData(d3.json, './public/data/anolis-awesomeness-res.json', 'continuous'),\n        'island' : await loadData(d3.json, './public/data/anolis-island-res.json', 'discrete'),\n        'SVL' : await loadData(d3.json, './public/data/anolis-svl-res.json', 'continuous'),\n        'ecomorph': await loadData(d3.json, './public/data/anolis-ecomorph-res.json', 'discrete'),\n    }\n\n    let colorKeeper = [\n        ['#0dc1d1', '#c8f7fd'],\n        ['#3AD701', '#2a9b01'],\n        ['#fec303', '#d3a001'],\n        ['#fe4ecb', '#d30197'],\n        ['#f36b2c'],\n        ['#1abc9c'],\n        ['#493267'],\n        ['#a40b0b'],\n        ['#0095b6'],\n    ]\n\n    ////CALCULATE THE SCALES FOR EACH ATTRIBUTE////////\n    let calculatedScales = calculateScales(calculatedAtt, colorKeeper);\n\n    ///MATCH LEAF CHARACTERS AND LABELS TO LEAVES///\n    let matchedLeaves = matchLeaves(labels, leaves, leafChar, calculatedScales);\n\n    //MATCH CALC ATTRIBUTES TO EDGES///\n    let matchedEdges = matchEdges(edges, edgeLen, calculatedAtt, calculatedScales);\n\n    ///CALCULATES PATHS FROM THE DATA////\n    let paths = allPaths(matchedEdges, matchedLeaves, \"V1\", \"V2\");\n \n   let normedPaths = normPaths(paths, calculatedAtt, calculatedScales);\n\n   dataMaster.push(normedPaths);\n   \n \n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'edgeLength', 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    ////////TREE RENDER IN SIDEBAR////////\n    let nestedData = buildTreeStructure(paths, edges);\n\n    renderTreeButtons(nestedData, normedPaths, calculatedScales, sidebar, false);\n\n    let tree = renderTree(nestedData, normedPaths, calculatedScales, sidebar, false);\n    ////Render the summary distributions////\n    \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n});\n/*\nloadData(d3.json, './public/data/geospiza_with_attributes.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    //console.log('pa',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/geospiza_loop_all_asr_features.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('pa RICH',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/anolis_rich_ASR_pad_vs_tail.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('anolis RICH',pathArray);\n});*/\n\n\n\n\n"],"sourceRoot":""}