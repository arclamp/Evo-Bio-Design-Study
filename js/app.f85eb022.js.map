{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/rendering.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","_x","_x2","_x3","_loadData","this","arguments","_callee","readFunction","fileString","type","regeneratorRuntime","wrap","_context","prev","next","sent","String","abrupt","stop","calculateScales","calculatedAtt","colorKeeper","keys","map","max","d3","rows","upperCI95","min","lowerCI95","field","yScale","range","domain","clamp","satScale","catColor","scaleCat","fields","filter","f","stateColors","sc","state","color","scales","scaleName","matchLeaves","labels","leaves","leafChar","calculatedScales","mappedLeafLabels","x","leaf","label","leafCharIndex","node","V2","attr","chosenOne","indexOf","forEach","k","scaleOb","thisScale","states","scaleVal","realVal","scale","scaledHigh","scaledLow","attributes","matchEdges","edges","edgeLen","edge","attrKeys","index","edgeLength","res","estimate","undefined","row","normPaths","paths","att","root","nodeLabels","rootAttr","console","error","maxBranch","xScale","leafIndex","prevStep","assign","step","edgeMove","move","formatAttributeData","normedPaths","filterArray","path","winState","attrLabel","st","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","filterMaster","toggleFilters","filterButton","main","moveMetric","filterDiv","classed","text","style","presentFilters","noShow","attribute","wrapper","append","svg","labelGroups","selectAll","join","toggle","shownToggs","on","togg","circle","toggleCircle","filter-type","before-data","filterComponent_toConsumableArray","newKeys","hideKeys","newFilMaster","attributeWrapper","remove","attData","predictedAttrGrps","renderAttributes","drawContAtt","drawDiscreteAtt","renderAttToggles","concat","selectWrapper","attButton","stateChange","attProps","selectedOption","options","optionArray","optKeys","button1","button2","submit","fromState","classList","toState","lastFilter","log","dataMaster","test","discreteFilter","filterOb","filterType","attribute-type","filterFunction","drawPathsAndAttributes","treeLinks","treeNode","nodeList","flatMap","missingLinks","missingNodes","filterToolbar","button","span","xSpan","continRanges","ranges","brushBars","wrapperRect","ticks","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","predictedFilter","sort","observedFilter","continuousFilter","formater","datum","filterLine","fil","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","species","queryFilter","predicted","observed","numb","filterPred","filterObs","win","selectorDiv","selectId","dropDownWrapper","renderDistibutions","mainDiv","newNormed","distributionView_toConsumableArray","summarizedData","filtered","maxBranches","maxMove","flat","lastnode","attKey","moveMap","stateKeys","distrib","distribution","Array","fill","u","newOb","newT","stateData","drow","realMean","branch","b","realStDev","realStUp","av","realStDown","scaleMean","scaleStDev","scaleStUp","scaleStDown","final","pathData","newScale","combinedData","colorScales","stateCategories","count","y","bins","thresholds","histogram","maxY","h","ob","attributeGroups","innerTime","contpaths","lineGen","nodes","stateGroups","entries","lineGenD","area","y0","y1","observedGroup","stateBars","toolbarControl","toolbar","pathView","viewButton","lengthButton","scrunchButton","toggleScrunch","togglePathView","pathSelected","selectedPath","otherPaths","selectedDiv","selectedPaths_toConsumableArray","selectedSpecies","treeNodes","select","attrHide","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrSortWrap","radioDiv","radio","sorted","a","high","leafOther","highLeaves","low","lowLeaves","same","svgTest","selectWrap","selectedGroups","renderPaths","nearest","nodearray","renderSelectedView","sortedPaths","chosenPath","pathIndex","chosen","distance","sortOtherPaths","collapsed","pathGroups","attKeys","attrMove","attributeHeight","attribWrap","sizeAndMove","pathWrapTest","pathWrap","branchFrequency","reduce","acc","curr","circleScale","values","notIt","string","charAt","toUpperCase","timelines","nodeGroups","hovers","continuousAtt","innerTimeline","innerBars","change","height","continuousPaths","rangeRect","colorScale","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","tool","transition","duration","html","pageX","pageY","endStateDot","buildTreeStructure","getNested","children","V1","updateBrush","_this","sidebar","toolbarDiv","treeFilter","sidebarComponent_toConsumableArray","sidebarComponent_asyncToGenerator","mark","treeBrush","renderTreeButtons","nestedData","treeViewButton","renderTree","margin","width","treemap","size","addingEdgeLength","combEdge","chil","treenodes","g","descendants","parent","then","_ref","edgeSource","matchedLeaves","matchedEdges","unique","self","t0","t1","t2","t3","awesomeness","island","SVL","ecomorph"],"mappings":"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","file":"js/app.f85eb022.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([133,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n           // console.log(calculatedAtt[d].type, max, min, calculatedAtt)\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, 1]).domain([min, max]),\n                'catColor': colorKeeper[i],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i]};\n                }),\n                'catColor': colorKeeper[i],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n         leaf.label = mappedLeafLabels[i];\n        \n         let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n     \n         leaf.node = leaf.V2;\n         let keys = calculatedScales.map(m=> m.field);\n         let attr = {};\n         \n         let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n         keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                     return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                 });\n             \n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n \n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                    res.scaleVal = scale(res.estimate);\n                    res.scaledLow = scale(res.lowerCI95);\n                    res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                        return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function normPaths(paths, calculatedAtt, calculatedScales){\n    paths.forEach((p, i)=> {\n        p[0].attributes = {};\n        Object.keys(calculatedAtt).map(att=> { \n            if(calculatedAtt[att].type == 'continuous'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                p[0].attributes[att] = {};\n                let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n                p[0].attributes[att].scaleVal =  scale(root.estimate);\n                p[0].attributes[att].scaledLow =  scale(root.lowerCI95);\n                p[0].attributes[att].scaledHigh =  scale(root.upperCI95);\n                p[0].attributes[att].realVal = root.estimate;\n                p[0].attributes[att].upperCI95 = root.upperCI95;\n                p[0].attributes[att].lowerCI95 = root.lowerCI95;\n                p[0].attributes[att].scale = scale;\n                p[0].attributes[att].type = 'continuous';\n            }else if(calculatedAtt[att].type == 'discrete'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n                let rootAttr = scales.map(s=> {\n                    return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n                });\n                p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n            }else{\n                console.error('type not found');\n            }\n        });\n    });\n    \n    let maxBranch = d3.max(paths.map(r=> r.length));\n\n    //SCALES for X, Y /////\n    let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n    let normedPaths = paths.map((p, i)=> {\n        p.xScale = xScale.domain([0, maxBranch - 1]);\n       // p.xScale = xScale.domain([0, 1]);\n        let leafIndex = p.length - 1;\n        let lengths = p.map(l=> l.edgeLength);\n        let prevStep = 0;\n        return p.map((m, j)=> {\n            let node = Object.assign({}, m);\n            //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n            let step = node.edgeLength + prevStep;\n            node.edgeMove = (j < leafIndex) ? step : 1;\n            prevStep = prevStep + node.edgeLength;\n         \n            node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n            return node;\n        });\n    });\n\n    return normedPaths;\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(normedPaths, scales, filterArray){\n  \n    let keys = (filterArray == null)? Object.keys(normedPaths[0][0].attributes): filterArray;\n   \n    let newData = normedPaths.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.move;\n                    m.attributes[key].edgeMove = m.edgeMove;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = scales.filter(s=> s.field === key)[0].yScale;\n                    m.attributes[key].satScale = scales.filter(s=> s.field === key)[0].satScale;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let state = m.attributes[key];\n                        state.winState = m.attributes[key].states.filter(f=> f.realVal === 1)[0].state;\n                        state.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === state.winState)[0].color;\n                        state.move = m.move;\n                        state.edgeMove = m.edgeMove;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : m.attributes[key];//.filter(f => f.state != undefined);\n                        return states.map((st, j)=> {\n                            st.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === st.state)[0].color;\n                            st.move = m.move;\n                            st.edgeMove = m.edgeMove;\n                            st.attrLabel = key;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n        if(notEmpty(node.children)){\n            pathArray.push(node);\n            pullPath([...pathArray], node.children, arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node_data['node name']);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, node]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import '../styles/index.scss';\nimport {formatAttributeData, calculateScales} from './dataFormat';\nimport {renderAttributes,  drawContAtt, drawDiscreteAtt, renderPaths, drawPathsAndAttributes} from './rendering';\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\n\nexport let filterMaster = [];\n\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, normedPaths, main, moveMetric, scales){\n    let filterDiv = d3.select('#filter-tab');\n\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        renderAttToggles(filterDiv, normedPaths, scales, 'edgeLength');\n        stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales);\n        queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n                    console.log(lastFilter);\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filterOb = {'filterType': 'data-filter', 'attribute-type': 'discrete', 'filterFunction':discreteFilter, 'attribute': selectedOption, 'states': [fromState, toState], 'data': test};\n                    filterMaster.push(filterOb);\n\n                    ////DRAW THE PATHS\n                    drawPathsAndAttributes(test, main, scales, moveMetric);\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    let filterToolbar = d3.select(\"#toolbar\");\n\n                    let button = filterToolbar.append('button').classed('btn btn-info', true);\n                    let span = button.append('span').classed('badge badge-light', true);\n                    span.text(test.length);\n                    button.append('h6').text(fromState);\n                    button.append('i').classed('fas fa-arrow-right', true);\n                    button.append('h6').text(toState + '  ');\n                   \n                    let xSpan = button.append('i').classed('close fas fa-times', true);\n                    xSpan.on('click', ()=> {\n                        drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                        d3.selectAll('.link-not-there').classed('link-not-there', false);\n                        d3.selectAll('.node-not-there').classed('node-not-there', false);\n                        button.remove();\n                    });\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    \n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    console.log('last', lastFilter);\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                    let filterOb = {'filterType': 'data-filter', 'attribute-type': 'continuous', 'filterFunction':continuousFilter, 'attribute': selectedOption, 'ranges': [predictedFilter, observedFilter], 'before-data': [...normedPaths], 'data': [...test]};\n                    filterMaster.push(filterOb);\n\n                    ////DRAW THE PATHS\n                    drawPathsAndAttributes(test, main, scales, moveMetric);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    let filterToolbar = d3.select(\"#toolbar\");\n\n                    let formater = d3.format(\".2s\");\n\n                    let button = filterToolbar.append('button').classed('btn btn-info', true);\n                    d3.select(button).datum(filterOb);\n                    let span = button.append('span').classed('badge badge-light', true);\n                    span.text(test.length);\n                    let label = button.append('h6').text(selectedOption + \"  Predicted: \"+ formater(predictedFilter[0]) + \"-\" + formater(predictedFilter[1]) + \" Observed: \" + formater(observedFilter[0]) + \"-\" + formater(observedFilter[1]));\n                    let xSpan = label.append('i').classed('close fas fa-times', true);\n                    xSpan.on('click', ()=> {\n                       \n                        let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> filterOb.attribute != f.attribute);\n                      \n                        let thisData = dataMaster[0];\n                        filterLine.forEach(fil=> {\n                            console.log(fil);\n                        });\n\n                        drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                        ////removeing the dimmed class to the unfilterd paths////\n                        d3.selectAll('.link-not-there').classed('link-not-there', false);\n                        d3.selectAll('.node-not-there').classed('node-not-there', false);\n                        button.remove();\n                    });\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n    \n}\n\nfunction discreteFilter(data, selectedOption, fromState, toState){\n\n    return data.filter(path=> {\n        let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n            let states = node.attributes[selectedOption].states;\n            if(fromState === 'Any'){\n                return true;\n            }else{\n                return states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n            }\n        });\n        let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n          let win = node.attributes[selectedOption].winState;\n          if(toState === 'Any'){\n              return true;\n          }else{\n              return win === toState;\n          }\n        });\n        return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n    });\n\n}\n\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n            drawPathsAndAttributes(test, main, scales, moveMetric);\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, scales, moveMetric){\n   \n    ////NEED TO GET RID OF TOGGLE SVG\n    let keys = Object.keys(normedPaths[0][0].attributes);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n   \n        filterMaster.push({'filter-type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n        let attributeWrapper = d3.selectAll('.attribute-wrapper');\n        attributeWrapper.selectAll('g').remove();\n        let attributeHeight = 45;\n      \n          /// LOWER ATTRIBUTE VISUALIZATION ///\n      \n        let attData =  formatAttributeData(normedPaths, scales, newKeys.data());\n        let predictedAttrGrps = renderAttributes(attributeWrapper, attData, scales, null);\n\n        d3.select('#main-path-view').style('height', ((normedPaths.length + predictedAttrGrps.data().map(m=> m[0]).length)* 30) + 'px');\n        d3.selectAll('.paths').attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (newKeys.data().length + 1))) +')');\n        \n        drawContAtt(predictedAttrGrps, moveMetric);\n        drawDiscreteAtt(predictedAttrGrps, scales, moveMetric);\n\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport * as d3 from \"d3\";\n\nexport function renderDistibutions(normedPaths, mainDiv, scales, moveMetric){\n\n\n    let width = 200;\n    let height = 80;\n  \n    let keys = Object.keys(normedPaths[0][0].attributes);\n\n    let newNormed = [...normedPaths];\n\n    formatAttributeData(newNormed, scales, null);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n    console.log('moveMetric', moveMetric);\n    let xScale = d3.scaleLinear();\n    if(moveMetric === 'move'){\n        xScale.domain([0, (maxBranch - 1)]).clamp(true);\n    }else{\n        xScale.domain([0, 1]).clamp(true);\n    }\n   \n  \n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n\n    let addMoveToAttributes = keys.map(key=> {\n            let filtered = newNormed.map(path=> {\n                return path.filter(n=> n.leaf != true);\n            });\n           \n            let maxBranches = filtered.filter(row=> row.length === maxBranch);\n            let maxMove = d3.max(maxBranches.flatMap(f=> f.flatMap(flat=> flat.edgeMove)));\n\n            let data = filtered.map(path=> {\n               \n                let prevStep = 0;\n                return path.map((node, i)=> {\n                    let attr = node.attributes[key];\n                    let lastnode = path.length - 1;\n\n                    let step = node.edgeLength + prevStep;\n                    node.edgeMove = step;\n                    prevStep = prevStep + node.edgeLength;\n\n                    if(attr.type === 'discrete'){\n                        let thisScale = xScale;\n                        thisScale.range([0, 790]);\n                        attr.move = thisScale(i);\n                        let x = d3.scaleLinear().domain([0, maxMove]).range([0, 790]).clamp(true);\n                        attr.edgeMove = x(node.edgeMove);\n                        attr.states = node.attributes[key].states.map(s=> {\n                            s.move = attr.move;\n                            s.edgeMove = attr.edgeMove;\n                            return s;\n                        });\n                    }else{//continuous///\n                        let thisScale = xScale;\n                        thisScale.range([0, 790]);\n                        let metric = function(index, max){\n                            if(index < lastnode){\n                                return thisScale(index);\n                            }else{\n                                return thisScale(max - 1);\n                            }\n                        };\n                       attr.move = metric(i, maxBranch);\n                    \n                       let x = d3.scaleLinear().domain([0, maxMove]).range([0, 790]).clamp(true);\n                       attr.edgeMove = x(node.edgeMove);\n                    }\n                    return attr;\n                });\n            });\n            data.attKey = key;\n            return data;\n    });\n\n    let summarizedData = addMoveToAttributes.map(attr=> {\n       \n        if(attr[0][0].type === 'discrete'){\n            \n           // let binCount = d3.max(attr.map(row=> row.length));\n            let moveMap = attr.filter(row=> row.length === maxBranch)[0];\n        \n            let stateKeys = attr[0][0].states.map(s=> s.state);\n            let distrib = {};\n            distrib.stateData = {};\n            stateKeys.forEach(key => {\n              \n                 let distribution = Array(maxBranch).fill({'data':[]}).map((u, i)=> {\n                     let newOb = {'data': u.data};\n                     newOb.move = moveMap[i].move;\n                     newOb.edgeMove = moveMap[i].edgeMove;\n                     return newOb;\n                 });\n                 attr.forEach((row)=> {\n                     let test = row.filter(r=> r.leaf != true).map(node=> node.states.filter(s=> s.state === key)[0]);\n                     test.forEach((t, i)=> {\n                         let newT = t;\n                         distribution[i].data.push(newT);\n                    });\n                 });\n                 \n                 distrib.stateData[key] = {};\n                 let data = distribution.map(drow=> {\n                     let filtered = drow.data.filter(d=> {\n                         return d.move === drow.move;});\n                     return filtered;\n                 });\n\n                 console.log('distrib', distrib);\n                 \n                 let color = data[0][0].color;\n               \n                 let thisScale = [...scales].filter(f=> f.field == attr.attKey)[0].scales.filter(f=> f.scaleName == key)[0].yScale;\n            \n                 thisScale.range([0, 80]);\n                 thisScale.clamp(true);\n               \n                 let realMean = data.map(branch=> d3.mean(branch.map(b=> b.realVal)));\n                 let realStDev = data.map(branch=> d3.deviation(branch.map(b=> b.realVal)));\n                 let realStUp = realMean.map((av, i)=> av + realStDev[i]);\n                 let realStDown = realMean.map((av, i)=> av - realStDev[i]);\n     \n                let scaleMean = data.map(branch=> d3.mean(branch.map(b=> thisScale(b.realVal))));\n                let scaleStDev = data.map(branch=> d3.deviation(branch.map(b=> thisScale(b.realVal))));\n                let scaleStUp = scaleMean.map((av, i)=> av + scaleStDev[i]);\n                let scaleStDown = scaleMean.map((av, i)=> av - scaleStDev[i]);\n                let x = d3.scaleLinear().range([0, 790]).domain([0, 1]);\n                let moves = distribution.map(d=> {\n                    let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n                    return distance; });\n\n                let final = moves.map((m, j)=> {\n                     return {\n                         'x': m,\n                         'realMean': realMean[j],\n                         'realStDev': realStDev[j],\n                         'realStUp': realStUp[j],\n                         'realStDown': realStDown[j],\n                         'scaleMean': scaleMean[j],\n                         'scaleStDev': scaleStDev[j],\n                         'scaleStUp': scaleStUp[j],\n                         'scaleStDown': scaleStDown[j],\n                        };\n                 });\n\n                 console.log('final', final);\n                 console.log('distribution', distribution);\n                 console.log('distrib', distrib);\n\n                 distrib.stateData[key].pathData = final;\n                 distrib.stateData[key].color = color;\n\n             });\n             distrib.attKey = attr.attKey;\n             distrib.type = 'discrete';\n             return distrib;\n        }else{\n            attr.type = 'continuous';\n            let thisScale = [...scales].filter(f=> f.field == attr.attKey)[0].yScale;\n            thisScale.range([0, 80]);//.scales.filter(f=> f.scaleName == key)[0].yScale;\n            thisScale.clamp(true);\n            let newScale = attr.map(row=> {\n                return row.map(n=> {\n                    n.scaleVal = thisScale(n.realVal);\n                    n.scaledHigh = thisScale(n.upperCI95);\n                    n.scaledLow = thisScale(n.lowerCI95);\n                    return n;\n                });\n            });\n          \n            newScale.type = 'continuous';\n            newScale.attKey = attr.attKey;\n            return newScale;\n        }\n    });\n\n    ////data for observed traits////\n    let observed = keys.map(key=> {\n        let leaves = newNormed.map(path=> {\n            return path.filter(n=> n.leaf === true)[0];\n        });\n\n        let data = leaves.map(leaf=> {\n            let attr = leaf.attributes[key];\n            if(attr.type === 'continuous'){\n                return attr.realVal;\n            }else if(attr.type === 'discrete'){\n                return attr.winState;\n            }else{\n                console.error('attribute type not found');\n            }\n        });\n\n        if(leaves[0].attributes[key].type === 'discrete'){\n            let colorScales = scales.filter(f=> f.field === key)[0].stateColors;\n            let stateCategories = leaves[0].attributes[key].states.map(m=> m.state);\n            let states = stateCategories.map(st=> {\n                let color = colorScales.filter(f=> f.state == st)[0].color;\n                let xScale = d3.scaleLinear().domain([0, stateCategories.length-1]);\n            \n                return {'key': st, 'count': data.filter(f=> f === st).length, 'x': xScale, 'color': color };\n            });\n            let max = d3.max(states.map(m=> m.count));\n            states.forEach(state=> {\n                state.max = max;\n                state.y = d3.scaleLinear().domain([0, max + 10]);\n            });\n            return states;\n        }else{\n   \n            let colorScales = scales.filter(f=> f.field === key)[0].catColor;\n            \n            var max = d3.max(data);\n            var min = d3.min(data);\n\n            let x = d3.scaleLinear().range([0, width]);\n            x.domain([0, 10]);\n\n            let y = d3.scaleLinear()\n            .range([height, 0]);\n\n             var histogram = d3.histogram()\n             .value(d=> d)\n             .domain([min, max])\n             .thresholds(x.ticks(10));\n\n            var bins = histogram(data);\n\n            let maxY = d3.max(bins.map(m=> m.length));\n            y.domain([0, maxY]);\n            \n            let newBins = bins.map(h=> {\n                h.x = x;\n                h.y = y;\n                h.color = colorScales;\n                return h;\n            });\n\n           return newBins;\n        };\n    });\n\n    let combinedData = observed.map((ob, i)=> {\n        return {'observed': ob, 'predicted': summarizedData[i]};\n    });\n\n\n    let attributeGroups = svg.selectAll('.combined-attr-grp').data(combinedData).join('g').classed('combined-attr-grp', true);\n    attributeGroups.attr('transform', (d, i)=> 'translate(0,'+(i * 110)+')');\n\n    let predictedAttrGrps = attributeGroups.append('g').classed('summary-attr-grp', true);\n\n    let innerTime = predictedAttrGrps.append('g').classed('inner-attr-summary', true);\n    innerTime.attr('transform', 'translate(105, 0)');\n    innerTime.append('line').attr('x1', 0).attr('y1', 40).attr('x2', 800).attr('y2', 40).attr('stroke', 'gray').attr('stroke-width', 0.5);\n    let attrRect = innerTime.append('rect').classed('attribute-rect-sum', true);\n    attrRect.attr('x', 0).attr('y', 0).attr('height', 80).attr('width', 800);\n    let label = predictedAttrGrps.append('text').text(d=> d.predicted.attKey);\n    label.attr('x', 100).attr('y', 25).attr('text-anchor', 'end');\n    let cont = innerTime.filter(f=> f.predicted.type === 'continuous');\n\n    //////////experimenting with continuous rendering///////////////////////////////\n    let contpaths = cont.selectAll('g.summ-paths').data(d=> d.predicted).join('g').classed('summ-paths', true);\n   // contpaths = contEnter.merge(contpaths);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        if(moveMetric === 'move'){return d.move;}\n        else{return d.edgeMove; }})\n    .y(d=> d.scaleVal);\n\n    let line = contpaths.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line-sum\")\n    .style('stroke', (d)=> d[0].color);\n\n    let nodes = contpaths.selectAll('.node-sum').data(d=> d).join('g').attr('class', 'node-sum');\n    nodes.attr('transform', (d, i) => {\n        if(moveMetric === 'move'){\n            return 'translate('+ d.move +', 0)';\n        }else{\n            return 'translate('+ d.edgeMove +', 0)';\n        }\n    });\n    nodes.append('rect').attr('x', 0).attr('y', 0).attr('width', 10).attr('height', 80).classed('inner-node-wrap', true);\n    nodes.append('rect').attr('x', 0).attr('y', (d, i)=> d.scaledLow).attr('width', 10).attr('height', (d, i)=> {\n        return (d.scaledHigh - d.scaledLow);\n    }).classed('range-rect-sum', true).style('fill', d=> d.color);\n    svg.attr('height', (summarizedData.length * 120));\n\n    //////////experimenting with discrete rendering///////////////////////////////\n    let disc = innerTime.filter(f=> f.predicted.type === 'discrete').classed('discrete-sum', true);\n\n    let stateGroups = disc.selectAll('.state-sum').data(d=> Object.entries(d.predicted.stateData).map(m=> m[1])).join('g').classed('state-sum', true);\n  //  stateGroups = stateEnter.merge(stateGroups);\n\n    var lineGenD = d3.line()\n    .x(d=> d.x)\n    .y(d=> d.scaleMean);\n\n    let lineD = stateGroups.append('path')\n    .attr(\"d\", d=> lineGenD(d.pathData))\n    .attr(\"class\", \"inner-line-sum-discrete\")\n    .style('stroke', (d, i)=> {\n        return d.color;\n    });\n\n    let area = d3.area()\n    .x(d => {\n        console.log(d);\n        return d.x;})\n    .y0(d => d.scaleStDown)\n    .y1(d => d.scaleStUp);\n    \n    let areaG =   stateGroups.append(\"path\")\n    .attr(\"fill\", d=> d.color)\n    .attr(\"d\", d=> {\n        console.log(d.pathData);\n        return area(d.pathData);})\n    .classed('state-area-sum', true);\n\n    let observedGroup = attributeGroups.append('g').classed('observed-att', true);\n    observedGroup.attr('transform', 'translate(920, 0)');\n    observedGroup.append('rect').attr('width', 200).attr('height', 80).attr('x', 0).attr('y', 0).classed('wrapper-rect', true);\n\n    /////////OBSERVED DISCRETE RENDERING///////////////////////\n    let observedDiscrete = observedGroup.filter(f=> f.predicted.type === 'discrete');\n  \n    let stateBars = observedDiscrete.selectAll('.state-bar').data(d=> d.observed).join('g').classed('state-bar', true);\n   // stateBars = rectBarEnter.merge(stateBars);\n\n    stateBars.attr('transform', (d, i)=> {\n        d.x.range([0, 180]);\n        console.log('d', d);\n        return 'translate('+ d.x(i)+ ',0)';\n    });\n\n    let stateRects = stateBars.append('rect').classed('graph-bars', true);\n   \n    stateRects.attr('x', 0)\n        .attr('height', (d, i)=> {\n            let scale = d3.scaleLinear().domain([0, d.max + 10]).range([80, 0]);\n            return scale(0) - scale(d.count);\n        }).attr('y', (d, i)=> {\n            let scale = d3.scaleLinear().domain([0, d.max + 10]).range([0, 80]);\n            let move = 80 - (scale(d.count));\n            return move;\n        }).attr('width', 20).style('fill', d=> d.color);\n\n    let labelsG = stateBars.append('g').attr('transform', 'translate(0, 80)');\n    let labels = labelsG.append('text').text(d=> d.key);\n    labels\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.1em\")\n    .attr(\"dy\", \".8em\")\n    .style('font-size', 9)\n    .attr(\"transform\", \"rotate(-35)\");\n\n    //NEED TO FINISH THIS\n\n    /////////OBSERVED Continuous RENDERING///////////////////////\n    let observedContinuous = observedGroup.filter(f=> f.predicted.type === 'continuous');\n\n    let binBars = observedContinuous.selectAll('.bin-bar').data(d=> d.observed).join('g').classed('bin-bar', true);\n\n    // append the bar rectangles to the svg element\n    \n    binBars.append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function(d, i) {\n            return \"translate(\" + d.x(i) + \",\" + d.y(d.length) + \")\"; })\n     //   .attr(\"width\", function(d) { return d.x(d.x1) - d.x(d.x0) -1 ; })\n        .attr(\"width\", 10)\n        .attr(\"height\", function(d) { return height - d.y(d.length); })\n        .attr('fill', (d)=> d.color);\n  /*\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n  \n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n*/\n}\n","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport {drawPathsAndAttributes} from './rendering';\nimport {toggleFilters} from './filterComponent';\nimport {renderDistibutions} from './distributionView';\nimport {dataMaster} from './index';\n\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, moveMetric, pathView){\n\n    console.log('toolbarcontrol', moveMetric);\n\n    let viewButton = toolbar.append('button').attr('id', 'view-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n\n    if(pathView === 'paths'){\n        viewButton.text('View Summary');\n    }else if(pathView === 'summary'){\n        viewButton.text('View Paths');\n    }else{\n        console.error('pathView parameter not found');\n    }\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, normedPaths, main, moveMetric, calculatedScales));\n\n    let lengthButton = toolbar.append('button').attr('id', 'change-length').attr('class', 'btn btn-outline-secondary');\n    if(moveMetric === 'move'){\n        lengthButton.text('Show Edge Length');\n    }else if(moveMetric === 'edgeLength'){\n        lengthButton.text('Normalize Edge Length');\n    }\n\n    lengthButton.on('click', ()=> {\n        if(lengthButton.text() === 'Show Edge Length'){\n            lengthButton.text('Normalize Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n            }else{\n                renderDistibutions(normedPaths, main, calculatedScales, 'edgeLength');\n            }\n        }else{\n            lengthButton.text('Show Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n            }else{\n                renderDistibutions(normedPaths, main, calculatedScales, moveMetric);\n            }\n        }\n    });\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, normedPaths, main, calculatedScales));\n    viewButton.on('click', ()=> togglePathView(viewButton, normedPaths, main, calculatedScales, moveMetric));\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, normedPaths, main, calculatedScales){\n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();//.selectAll('*').remove();\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength', true);\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();//.selectAll('*').remove();\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength', false);\n    }\n}\n\n/**\n * \n * @param {*} viewButton button that changes the actual view the text of the button determines what the view should change to \n * @param {*} normedPaths \n * @param {*} main \n * @param {*} calculatedScales \n */\nfunction togglePathView(viewButton, normedPaths, main, calculatedScales, moveMetric){\n   \n    if(viewButton.text() === 'View Paths'){\n        viewButton.text('View Summary');\n        main.selectAll('*').remove();//.selectAll('*').remove();\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n    }else{\n        viewButton.text('View Paths');\n        main.selectAll('*').remove();\n        renderDistibutions(normedPaths, main, calculatedScales, moveMetric);\n    }\n}\n\n\n\n\n\n","import * as d3 from \"d3\";\nimport {branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes} from './rendering';\nimport {formatAttributeData} from './dataFormat';\nimport {renderAttToggles} from './toolbarComponent';\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function pathSelected(selectedPath, otherPaths, scales, moveMetric){\n\n    let selectedDiv = d3.select('div#selected');\n    if(selectedPath === null){\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, moveMetric, false);\n    }else{\n        renderSelectedView([selectedPath], otherPaths, selectedDiv, scales, moveMetric);\n        let sortedPaths = sortOtherPaths([...selectedPath], otherPaths);\n        let main = d3.select('div#main');\n          /// LOWER ATTRIBUTE VISUALIZATION ///\n        drawPathsAndAttributes(sortedPaths.map(s=> s.data), main, scales, moveMetric, false);\n  \n        main.style('padding-top', '250px');\n    }\n}\nexport function sortOtherPaths(pathData, otherPaths){\n\n    let thisSpecies = pathData.filter(f=> f.leaf)[0];\n    let chosenPath = pathData.reverse().map(m=> m.node);\n    \n    let rankedPaths = otherPaths.map(path=> {\n        let step = 0;\n        let test = path.reverse().map((node, i)=> {\n            if(chosenPath.indexOf(node.node));\n            return {'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n        }).filter(f=> f.indexOf > -1);\n        let distance = (test[0].indexOf + test[0].pathIndex);\n        return {'data':path.reverse(), 'distance': distance };\n\n    });\n    let sortedData = rankedPaths.sort(function(a, b){return a.distance - b.distance;});\n    return sortedData;\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales, moveMetric){\n\n    let selectedSpecies = pathData.flatMap(p=> p.filter(f=> f.leaf === true).map(n=> n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node=> selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n   ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc=> {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m=> m.field) : null;\n\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    let xIconWrap = selectedTool.append('div').classed('x-icon', true);\n    let xIcon = xIconWrap.append('i').classed(\"far fa-times-circle\", true);\n    xIcon.on('click', ()=> {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        \n        pathSelected(null, dataMaster[0], scales, moveMetric);\n    });\n\n    ///////////////////////\n\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', ()=> sortPaths(sortByDistanceButton));\n    \n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m=> m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n   let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n   let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d=> d).attr('id', (d, i)=> 'radio-'+i).classed(\"form-check-input\", true);\n   radioDiv.append('label').text(d=> d).property('for', (d, i)=> 'radio-'+i).classed(\"form-check-label\", true);\n\n   radio.on('click', (d, i)=> {\n   \n    let leaf = pathData.map(node=> node.filter(d=> d.leaf === true)[0])[0];\n \n    let sorted = [...otherPaths].sort(function(a, b){\n        return a.filter(n=> n.leaf === true)[0].attributes[d].realVal - b.filter(n=> n.leaf === true)[0].attributes[d].realVal;\n    });\n\n    let main = d3.select('div#main');\n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n    main.style('padding-top', '250px');\n\n    let paths = main.select('svg#main-path-view').selectAll('.paths');\n\n    let high = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n    });\n    high.classed('high', true);\n\n    let highLeaves = high.data().map(path=> path.filter(f=> f.leaf === true)[0].node);\n    \n    treeNodes.filter(f=> highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n\n    let low = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n    });\n    low.classed('low', true);\n\n    let lowLeaves = low.data().map(path=> path.filter(f=> f.leaf === true)[0].node);\n\n    treeNodes.filter(f=> lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n\n    let same = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n    });\n    same.classed('same', true);\n});\n   /////////////////////////////////////////////////\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty()? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    let selectWrap = svg.append('g').classed('select-wrap', true);\n\n    let selectedGroups = renderPaths(pathData, selectWrap, scales, moveMetric);\n    selectedGroups.attr('transform', (d, i)=> 'translate(0,'+(i*60)+')');\n\n    let nodes = selectedGroups.select('.time-line').selectAll('.node');\n    nodes.on('mouseover', (d, i)=> {\n      \n        let nearest = otherPaths.filter(path=> {\n            let nodearray = path.flatMap(f=> f.node);\n            return nodearray.indexOf(d.node) > -1;\n        });\n       \n        let nearestA = nearest[0];\n        let nearestB = nearest[1];\n    });\n\n    //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n       /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n    let attData = formatAttributeData(pathData, scales, attrFilter);\n    let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n      \n    let attributeHeight = 45;\n    selectedGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (Object.keys(d[1].attributes).length + 1))) +')');\n    \n    drawContAtt(attributeGroups);\n    drawDiscreteAtt(attributeGroups, scales);\n\n    //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n    //tranforming elements\n    svg.style('height', ((pathData.length + attributeGroups.data().map(m=> m[0]).length)* 250) + 50 + 'px');\n    selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m=> m[0]).length)* 45) + 50 + 'px');\n    attributeWrapper.attr('transform', (d)=> 'translate(140, 25)');\n\n    d3.selectAll('.selected-path').classed('selected-path', false);\n\n    ////NEED TO GENERALIZE BRANCH FUNCTION IN RENDER TO WORK HERE\n\n    return svg;\n}\n\nfunction sortPaths(sortButton){\n    if(sortButton.text() === 'Sort Most to Least'){\n        sortButton.text('Sort Least to Most');\n    }else{\n        sortButton.text('Sort Most to Least');\n    }\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {renderSelectedView, pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric, collapsed){\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(normedPaths, main, calculatedScales, moveMetric);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute');\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> f.field != attrHide[0].attribute).map(m=> m.field) : null;\n    \n    let attData = formatAttributeData(normedPaths, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = collapsed? 20 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 10)* attrMove + 10)) +')');\n    \n    drawContAtt(predictedAttrGrps, moveMetric, collapsed);\n    drawDiscreteAtt(predictedAttrGrps, calculatedScales, moveMetric, collapsed);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, normedPaths, (attrMove * attributeHeight))\n\n}\n\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\n\nexport function renderPaths(pathData, main, scales, moveMetric){\n    \n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n     let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n \n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n    pathGroups.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales, moveMetric);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected(d, notIt.data(), scales, moveMetric);\n        }\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       // let string = d[d.length - 1].label\n       let string = d.filter(f=> f.leaf === true)[0].label;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 10).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> d).join('g').classed('node', true);\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 10)';});\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n      \n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n  \n}\n\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n\n    let attributeHeight = collapsed? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> data[i]).join('g');\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n    return predictedAttrGrps;\n}\n\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 0 : 1;\n        p.change = test;\n    })\n}\n\nfunction continuousPaths(innerTimeline, moveMetric, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path, moveMetric);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = collapsed? 20 : 45;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.yScale;\n        y.range([height, 0]);\n        if(collapsed){\n            return y(d.change);\n        }else{\n            return y(d.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\n\nexport function drawContAtt(predictedAttrGrps, moveMetric, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return d[0].type === 'continuous';\n    });\n\n    let attributeHeight = collapsed ? 20 : 45;\n    let attrLabel = continuousAtt.append('text').text(d=> d[0].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);//.data(normedPaths);//.attr('transform', (d, i)=> 'translate(0, 0)');\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n   // attributeNodesCont = attrNodesContEnter.merge(attributeNodesCont);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, moveMetric, collapsed);\n ////////\n\n    let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    innerRect.attr('height', attributeHeight);\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', 20).attr('height', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.lowerCI95) - y(d.upperCI95);\n        let barHeight = collapsed ? 20 : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || collapsed) ? 0 : y(d.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        let colorScale = d3.scaleLinear().range(['blue', 'red']).domain([0, 1]);\n        console.log(colorScale(d.realVal))\n        return colorScale(d.realVal);\n       //return d.color\n    });\n    rangeRect.attr('opacity', (d)=> {\n        console.log(d.satScale(d.realVal))\n        return d.satScale(d.realVal);\n    });\n    innerBars.append('rect').attr('width', 20).attr('height', 5)\n    .attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        return 'translate(0, '+ y(d.realVal) +')';})\n    .attr('fill', d=> d.color);\n}\n\nexport function drawDiscreteAtt(predictedAttrGrps, scales, moveMetric, collapsed){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    let attributeHeight = collapsed? 20 : 45;\n    let attrLabel = discreteAtt.append('text').text(d=> d[d.length - 1].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        let disct = d.map(m=> {\n           \n            let test = (m.leaf == true) ? m.states.map(s=> {\n                s.move = m.move;\n                s.edgeMove = m.edgeMove;\n                s.color = m.color;\n                return s;\n            }) : m;\n            return test;\n        });\n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n            return disct.map(m=> m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n   // statePath = pathEnter.merge(statePath);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance + 7;})\n    .y(d=> {\n       \n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        //d.scaleVal\n        return y(d.realVal);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;});\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);//.data(normedPaths);//.attr('transform', (d, i)=> 'translate(0, 0)');\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g').classed('attribute-node-discrete', true);\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        if(d[0]){\n            let distance = (moveMetric === 'move') ? d[0].move : x(d[0].edgeMove);\n            return 'translate('+distance+', 0)';\n        }else{\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n    let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n        return d;\n    }).join('circle').classed('dots', true);\n    \n    stateDots.attr('cx', 10).attr('cy', (d)=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n        return y(d.realVal);\n    }).attr('r', 2).style('fill', d=> d.color);\n\n    stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n\n    stateDots.on(\"mouseover\", function(d) {\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html(d.state + \": \" + f(d.realVal))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        })\n      .on(\"mouseout\", function(d) {\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n        });\n\n    let endStateDot = attributeNodesDisc.filter((att, i)=> {\n        return att[0] === undefined;});\n\n    endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n       return d.color;\n    });\n    ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n\n    endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(15, 17)').style('font-size', 10);\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {renderSelectedView, pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {drawPathsAndAttributes} from './rendering';\nimport {dataMaster} from './index';\nimport {filterMaster} from './filterComponent';\n\nfunction getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges.rows);\n    return nestedData;\n}\n\nfunction updateBrush(){\n    let sidebar = d3.select('#sidebar');\n    let main = d3.select('#main');\n    let toolbarDiv = d3.select('#toolbar');\n\n    let nodes = sidebar.select('svg').select('g').selectAll('.node');\n    let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n\n    let filterArray = selectedNodes.data().map(n=> n.data.node);\n  \n    let test = treeFilter(normedPaths, filterArray);\n\n    let filterOb = {'filterType': 'data-filter', 'attribute-type': 'topology', 'filterFunction':treeFilter, 'before-data': [...normedPaths], 'data': [...test]}\n    filterMaster.push(filterOb);\n\n    drawPathsAndAttributes(test, main, calculatedScales, 'edgeLength');\n     ///DIMMING THE FILTERED OUT NODES//////\n\n    ////Class Tree Links////\n    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n    d3.selectAll('.link-not-there').classed('link-not-there', false);\n    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingLinks.classed('link-not-there', true);\n\n    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingNodes.classed('node-not-there', true);\n\n    ///END NODE DIMMING///////\n\n    let button = toolbarDiv.append('button').classed('btn btn-info', true);\n    let span = button.append('span').classed('badge badge-light', true);\n    span.text(test.length);\n    let label = button.append('h6').text('Tree Filter');\n    let xSpan = label.append('i').classed('close fas fa-times', true);\n    xSpan.on('click', async ()=> {\n        await drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n        d3.selectAll('.selected').classed('selected', false);\n        d3.selectAll('.link-not-there').classed('link-not-there', false);\n        d3.selectAll('.node-not-there').classed('node-not-there', false);\n        button.remove();\n        d3.select(this).call(treeBrush.move, null);\n    });\n}\n\nexport function renderTreeButtons(nestedData, normedPaths, calculatedScales, sidebar){\n    ///SIDBAR STUFF\n    let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n\n    treeButton.on('click', ()=> {\n        treeBrush.on('end', updateBrush);\n        let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Show Lengths').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n       // treeBrush.on('end', updateBrush);\n       // let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n       console.log('renderTree')\n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n           renderTree(nestedData, normedPaths, calculatedScales, sidebar, true);\n           treeViewButton.text('Hide Lengths');\n       }else{\n        renderTree(nestedData, normedPaths, calculatedScales, sidebar, false);\n        treeViewButton.text('Show Lengths');\n       }\n    });\n}\n\nexport function renderTree(nestedData, normedPaths, calculatedScales, sidebar, length){\n\n    let treeBrush = d3.brush().extent([[0, 0], [400, 600]]);\n\n    function treeFilter(data, selectedNodes){\n        return data.filter(path=> {\n            let nodeNames = path.map(no=> no.node);\n            let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n            return booArray.indexOf(true) > -1\n        });\n    }\n\n    // set the dimensions and margins of the diagram\n    var margin = {top: 10, right: 90, bottom: 50, left: 20},\n    width = 400 - margin.left - margin.right,\n    height = 700 - margin.top - margin.bottom;\n\n// declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([height, width]);\n  //  console.log('nested', nestedData)\n    function addingEdgeLength(edge, data){\n        data.combEdge = data.edgeLength + edge;\n        if(data.children){\n            data.children.forEach(chil=> {\n                addingEdgeLength(data.combEdge, chil);\n            });\n        }\n    }\n    addingEdgeLength(0, nestedData)\n  //  console.log('new nested', nestedData);\n//  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData);\n\n// maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, width]).clamp(true);\n\n    var treeSvg = sidebar.append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom),\n    g = treeSvg.append(\"g\")\n    .attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// adds the links between the nodes\n    var link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", function(d) {\n        if(length){\n            return \"M\" + xScale(d.data.combEdge) + \",\" + d.x\n            + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.x\n            + \" \" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.parent.x\n            + \" \" + xScale(d.parent.data.combEdge) + \",\" + d.parent.x;\n        }else{\n            return \"M\" + d.y + \",\" + d.x\n            + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n            + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n            + \" \" + d.parent.y + \",\" + d.parent.x;\n        }\n        /*\n        return \"M\" + d.y + \",\" + d.x\n        + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n        + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n        + \" \" + d.parent.y + \",\" + d.parent.x;\n        */\n       \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants())\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); })\n    .attr(\"transform\", function(d) { \n   \n        if(length){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + d.x + \")\"; \n        }else{\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; \n        }\n    \n    //return \"translate(\" + d.y + \",\" + d.x + \")\"; \n});\n\n    // adds the circle to the node\n    node.append(\"circle\")\n    .attr(\"r\", 3);\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n    });\n\n    return node;\n/////END TREE STUFF\n///////////\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, matchLeaves, matchEdges, normPaths, filterKeeper} from './dataFormat';\nimport {allPaths, pullPath, getPath} from './pathCalc';\nimport {drawPathsAndAttributes} from './rendering';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {renderDistibutions} from './distributionView';\nimport {toolbarControl, renderAttToggles} from './toolbarComponent';\n\nexport const dataMaster = [];\n\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\n\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n\nloadData(d3.json, './public/data/anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edgeLen = await loadData(d3.json, './public/data/anolis-edge-length.json', 'edge');\n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.V1);\n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.V2) == -1 );\n\n    let leafChar = await loadData(d3.json, './public/data/anolisLeafChar.json', '');\n\n    let labels = await loadData(d3.json, './public/data/anolis-labels.json', '');\n\n\n    ///MAKE A ESTIMATED SCALES THING\n    let calculatedAtt = {\n        'awesomeness' : await loadData(d3.json, './public/data/anolis-awesomeness-res.json', 'continuous'),\n        'island' : await loadData(d3.json, './public/data/anolis-island-res.json', 'discrete'),\n        'SVL' : await loadData(d3.json, './public/data/anolis-svl-res.json', 'continuous'),\n        'ecomorph': await loadData(d3.json, './public/data/anolis-ecomorph-res.json', 'discrete'),\n    }\n\n    let colorKeeper = [\n        '#32C1FE','#3AD701','#E2AD01','#E2019E','#f36b2c','#1abc9c','#493267','#a40b0b','#0095b6',\n    ]\n\n    ////CALCULATE THE SCALES FOR EACH ATTRIBUTE////////\n    let calculatedScales = calculateScales(calculatedAtt, colorKeeper);\n\n    ///MATCH LEAF CHARACTERS AND LABELS TO LEAVES///\n    let matchedLeaves = matchLeaves(labels, leaves, leafChar, calculatedScales);\n\n    //MATCH CALC ATTRIBUTES TO EDGES///\n    let matchedEdges = matchEdges(edges, edgeLen, calculatedAtt, calculatedScales);\n\n    ///CALCULATES PATHS FROM THE DATA////\n    let paths = allPaths(matchedEdges, matchedLeaves, \"V1\", \"V2\");\n \n   let normedPaths = normPaths(paths, calculatedAtt, calculatedScales);\n\n   dataMaster.push(normedPaths);\n   \n   // renderDistibutions(normedPaths, main, calculatedScales);\n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'edgeLength', 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    ////////TREE RENDER IN SIDEBAR////////\n    let nestedData = buildTreeStructure(paths, edges);\n\n    renderTreeButtons(nestedData, normedPaths, calculatedScales, sidebar, false);\n\n    let tree = renderTree(nestedData, normedPaths, calculatedScales, sidebar, false);\n    ////Render the summary distributions////\n    //renderDistibutions(normedPaths, main, calculatedScales, 'move');\n    \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n});\n/*\nloadData(d3.json, './public/data/geospiza_with_attributes.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    //console.log('pa',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/geospiza_loop_all_asr_features.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('pa RICH',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/anolis_rich_ASR_pad_vs_tail.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('anolis RICH',pathArray);\n});*/\n\n\n\n\n"],"sourceRoot":""}