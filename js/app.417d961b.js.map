{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/rendering.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","_x","_x2","_x3","_loadData","this","arguments","_callee","readFunction","fileString","type","regeneratorRuntime","wrap","_context","prev","next","sent","String","abrupt","stop","calculateScales","calculatedAtt","colorKeeper","keys","map","max","d3","rows","upperCI95","min","lowerCI95","realVal","field","yScale","range","domain","clamp","satScale","colorScale","catColor","scaleCat","fields","filter","f","stateColors","sc","state","color","scales","scaleName","matchLeaves","labels","leaves","leafChar","calculatedScales","mappedLeafLabels","x","leaf","label","leafCharIndex","node","V2","attr","chosenOne","indexOf","forEach","k","scaleOb","thisScale","states","scaleVal","scale","scaledHigh","scaledLow","attributes","matchEdges","edges","edgeLen","edge","attrKeys","index","edgeLength","res","estimate","undefined","row","normPaths","paths","att","root","nodeLabels","rootAttr","console","error","maxBranch","xScale","leafIndex","prevStep","assign","step","edgeMove","move","formatAttributeData","normedPaths","filterArray","path","winState","attrLabel","st","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","filterMaster","toggleFilters","filterButton","main","moveMetric","filterDiv","classed","text","style","presentFilters","noShow","attribute","wrapper","append","svg","labelGroups","selectAll","join","toggle","shownToggs","on","togg","circle","toggleCircle","before-data","filterComponent_toConsumableArray","newKeys","hideKeys","newFilMaster","log","drawPathsAndAttributes","renderAttToggles","concat","selectWrapper","attButton","stateChange","attProps","selectedOption","options","remove","optionArray","optKeys","button1","button2","submit","fromState","classList","toState","lastFilter","dataMaster","test","discreteFilter","filterOb","filterType","attribute-type","filterFunction","treeLinks","treeNode","nodeList","flatMap","missingLinks","missingNodes","filterToolbar","button","span","xSpan","continRanges","ranges","brushBars","wrapperRect","ticks","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","predictedFilter","sort","observedFilter","continuousFilter","formater","datum","filterLine","fil","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","species","queryFilter","predicted","observed","numb","filterPred","filterObs","win","selectorDiv","selectId","dropDownWrapper","renderDistibutions","mainDiv","pathdata","newNormed","distributionView_toConsumableArray","medBranchLength","normBins","Array","fill","base","top","binI","internalNodes","sortedBins","mapNorm","bin","fData","v","histogram","thresholds","bins","branches","branchScale","binnedWrap","branchGroup","continDist","lineGen","curve","y","y0","y1","dat","each","nodes","distrib","rangeRect","newy","toolbarControl","toolbar","pathView","collapsed","viewButton","lengthButton","scrunchButton","toggleScrunch","togglePathView","pathSelected","selectedPath","otherPaths","selectedDiv","selectedPaths_toConsumableArray","pathData","selectedSpecies","treeNodes","select","attrHide","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrSortWrap","radioDiv","radio","sorted","a","b","high","leafOther","highLeaves","low","lowLeaves","same","svgTest","selectWrap","selectedGroups","renderPaths","nearest","nodearray","attributeWrapper","attData","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","renderSelectedView","sortedPaths","chosenPath","pathIndex","chosen","distance","sortOtherPaths","pathGroups","attKeys","attrMove","predictedAttrGrps","attributeHeight","attribWrap","sizeAndMove","pathWrapTest","pathWrap","branchFrequency","reduce","acc","curr","circleScale","values","notIt","string","charAt","toUpperCase","timelines","nodeGroups","hovers","innerTimeline","height","innerPaths","change","continuousAtt","innerBars","continuousPaths","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","tool","transition","duration","html","pageX","pageY","endStateDot","buildTreeStructure","getNested","children","V1","updateBrush","_this","sidebar","toolbarDiv","treeFilter","sidebarComponent_toConsumableArray","sidebarComponent_asyncToGenerator","mark","treeBrush","renderTreeButtons","nestedData","treeViewButton","renderTree","margin","width","treemap","size","addingEdgeLength","combEdge","chil","treenodes","g","descendants","parent","then","_ref","edgeSource","matchedLeaves","matchedEdges","unique","self","t0","t1","t2","t3","awesomeness","island","SVL","ecomorph"],"mappings":"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","file":"js/app.417d961b.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([132,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n           // console.log(calculatedAtt[d].type, max, min, calculatedAtt)\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n         leaf.label = mappedLeafLabels[i];\n        \n         let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n     \n         leaf.node = leaf.V2;\n         let keys = calculatedScales.map(m=> m.field);\n         let attr = {};\n         \n         let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n         keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                     return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                 });\n             \n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n \n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                    res.scaleVal = scale(res.estimate);\n                    res.scaledLow = scale(res.lowerCI95);\n                    res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                        return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function normPaths(paths, calculatedAtt, calculatedScales){\n    paths.forEach((p, i)=> {\n        p[0].attributes = {};\n        Object.keys(calculatedAtt).map(att=> { \n            if(calculatedAtt[att].type == 'continuous'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                p[0].attributes[att] = {};\n                let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n                p[0].attributes[att].scaleVal =  scale(root.estimate);\n                p[0].attributes[att].scaledLow =  scale(root.lowerCI95);\n                p[0].attributes[att].scaledHigh =  scale(root.upperCI95);\n                p[0].attributes[att].realVal = root.estimate;\n                p[0].attributes[att].upperCI95 = root.upperCI95;\n                p[0].attributes[att].lowerCI95 = root.lowerCI95;\n                p[0].attributes[att].scale = scale;\n                p[0].attributes[att].type = 'continuous';\n            }else if(calculatedAtt[att].type == 'discrete'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n                let rootAttr = scales.map(s=> {\n                    return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n                });\n                p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n            }else{\n                console.error('type not found');\n            }\n        });\n    });\n    \n    let maxBranch = d3.max(paths.map(r=> r.length));\n\n    //SCALES for X, Y /////\n    let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n    let normedPaths = paths.map((p, i)=> {\n        p.xScale = xScale.domain([0, maxBranch - 1]);\n       // p.xScale = xScale.domain([0, 1]);\n        let leafIndex = p.length - 1;\n        let lengths = p.map(l=> l.edgeLength);\n        let prevStep = 0;\n        return p.map((m, j)=> {\n            let node = Object.assign({}, m);\n            //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n            let step = node.edgeLength + prevStep;\n            node.edgeMove = (j < leafIndex) ? step : 1;\n            prevStep = prevStep + node.edgeLength;\n         \n            node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n            return node;\n        });\n    });\n\n    return normedPaths;\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(normedPaths, scales, filterArray){\n  \n    let keys = (filterArray == null)? Object.keys(normedPaths[0][0].attributes): filterArray;\n   \n    let newData = normedPaths.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.move;\n                    m.attributes[key].edgeMove = m.edgeMove;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = scales.filter(s=> s.field === key)[0].yScale;\n                    m.attributes[key].satScale = scales.filter(s=> s.field === key)[0].satScale;\n                    m.attributes[key].colorScale = scales.filter(s=> s.field === key)[0].colorScale;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let state = m.attributes[key];\n                        state.winState = m.attributes[key].states.filter(f=> f.realVal === 1)[0].state;\n                        state.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === state.winState)[0].color;\n                        state.move = m.move;\n                        state.edgeMove = m.edgeMove;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : m.attributes[key];//.filter(f => f.state != undefined);\n                        return states.map((st, j)=> {\n                            st.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === st.state)[0].color;\n                            st.move = m.move;\n                            st.edgeMove = m.edgeMove;\n                            st.attrLabel = key;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n        if(notEmpty(node.children)){\n            pathArray.push(node);\n            pullPath([...pathArray], node.children, arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node_data['node name']);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, node]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import '../styles/index.scss';\nimport {formatAttributeData, calculateScales} from './dataFormat';\nimport {renderAttributes,  drawContAtt, drawDiscreteAtt, renderPaths, drawPathsAndAttributes, sizeAndMove} from './rendering';\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\n\nexport let filterMaster = [];\n\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, normedPaths, main, moveMetric, scales){\n    let filterDiv = d3.select('#filter-tab');\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        renderAttToggles(filterDiv, normedPaths, main, scales, 'edgeLength');\n        stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales);\n        queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n                    console.log(lastFilter);\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filterOb = {'filterType': 'data-filter', 'attribute-type': 'discrete', 'filterFunction':discreteFilter, 'attribute': selectedOption, 'states': [fromState, toState], 'data': test};\n                    filterMaster.push(filterOb);\n\n                    console.log(d3.select('#scrunch').attr('value'))\n\n                    ////DRAW THE PATHS\n                    drawPathsAndAttributes(test, main, scales, moveMetric);\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    let filterToolbar = d3.select(\"#toolbar\");\n\n                    let button = filterToolbar.append('button').classed('btn btn-info', true);\n                    let span = button.append('span').classed('badge badge-light', true);\n                    span.text(test.length);\n                    button.append('h6').text(fromState);\n                    button.append('i').classed('fas fa-arrow-right', true);\n                    button.append('h6').text(toState + '  ');\n                   \n                    let xSpan = button.append('i').classed('close fas fa-times', true);\n                    xSpan.on('click', ()=> {\n                        drawPathsAndAttributes(normedPaths, main, scales, moveMetric, d3.select('#scrunch').attr('value'));\n                        d3.selectAll('.link-not-there').classed('link-not-there', false);\n                        d3.selectAll('.node-not-there').classed('node-not-there', false);\n                        button.remove();\n                    });\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                    let filterOb = {'filterType': 'data-filter', 'attribute-type': 'continuous', 'filterFunction':continuousFilter, 'attribute': selectedOption, 'ranges': [predictedFilter, observedFilter], 'before-data': [...normedPaths], 'data': [...test]};\n                    filterMaster.push(filterOb);\n\n                    ////DRAW THE PATHS\n                    drawPathsAndAttributes(test, main, scales, moveMetric);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    let filterToolbar = d3.select(\"#toolbar\");\n\n                    let formater = d3.format(\".2s\");\n\n                    let button = filterToolbar.append('button').classed('btn btn-info', true);\n                    d3.select(button).datum(filterOb);\n                    let span = button.append('span').classed('badge badge-light', true);\n                    span.text(test.length);\n                    let label = button.append('h6').text(selectedOption + \"  Predicted: \"+ formater(predictedFilter[0]) + \"-\" + formater(predictedFilter[1]) + \" Observed: \" + formater(observedFilter[0]) + \"-\" + formater(observedFilter[1]));\n                    let xSpan = label.append('i').classed('close fas fa-times', true);\n                    xSpan.on('click', ()=> {\n                       \n                        let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> filterOb.attribute != f.attribute);\n                      \n                        let thisData = dataMaster[0];\n                        filterLine.forEach(fil=> {\n                            console.log(fil);\n                        });\n\n                        drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                        ////removeing the dimmed class to the unfilterd paths////\n                        d3.selectAll('.link-not-there').classed('link-not-there', false);\n                        d3.selectAll('.node-not-there').classed('node-not-there', false);\n                        button.remove();\n                    });\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n    \n}\n\nfunction discreteFilter(data, selectedOption, fromState, toState){\n\n    return data.filter(path=> {\n        let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n            let states = node.attributes[selectedOption].states;\n            if(fromState === 'Any'){\n                return true;\n            }else{\n                return states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n            }\n        });\n        let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n          let win = node.attributes[selectedOption].winState;\n          if(toState === 'Any'){\n              return true;\n          }else{\n              return win === toState;\n          }\n        });\n        return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n    });\n\n}\n\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n            drawPathsAndAttributes(test, main, scales, moveMetric);\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, main, scales, moveMetric){\n\n    ////NEED TO GET RID OF TOGGLE SVG\n    let keys = Object.keys(normedPaths[0][0].attributes);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n   \n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n\n        console.log('filtermaster in render att toggles', filterMaster)\n\n\n        ////DRAW THE PATHS\n        drawPathsAndAttributes(normedPaths, main, scales, moveMetric);\n\n        /*\n        let attributeWrapper = d3.selectAll('.attribute-wrapper');\n        attributeWrapper.selectAll('g').remove();\n        \n      \n          /// LOWER ATTRIBUTE VISUALIZATION ///\n          let collapsed = d3.select('#scrunch').attr('value');\n          let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute');\n          let attKeys = attrHide.length > 0 ? scales.filter(f=> f.field != attrHide[0].attribute).map(m=> m.field) : null;\n          let attrMove = attKeys === null ? scales.length : attKeys.length;\n          let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n          ////\n\n        let attData =  formatAttributeData(normedPaths, scales, newKeys.data());\n        let predictedAttrGrps = renderAttributes(attributeWrapper, attData, scales, null, collapsed);\n\n        //d3.select('#main-path-view').style('height', ((normedPaths.length + predictedAttrGrps.data().map(m=> m[0]).length)* 30) + 'px');\n       // d3.selectAll('.paths').attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (newKeys.data().length + 1))) +')');\n        \n        drawContAtt(predictedAttrGrps, moveMetric, collapsed);\n        drawDiscreteAtt(predictedAttrGrps, scales, moveMetric, collapsed);\n\n        sizeAndMove(d3.select('#main-path-view'), attributeWrapper, normedPaths, (attrMove * attributeHeight))\n*/\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function renderDistibutions(normedPaths, mainDiv, scales, moveMetric){\n\n    let pathdata = (filterMaster.length > 0)? filterMaster : dataMaster[0];\n\n    let observedWidth = 200;\n    let predictedWidth = 800;\n    let height = 80;\n  \n    let keys = Object.keys(normedPaths[0][0].attributes);\n\n    let newNormed = [...pathdata];\n\n    formatAttributeData(newNormed, scales, null);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n    let medBranchLength = d3.median(newNormed.map(p=> p.length)) - 1;\n\n    let normBins = new Array(medBranchLength + 1).fill().map((m, i)=> {\n        let step = 1 / medBranchLength;\n        let base = (i > 0) ? ((i - 1) * step) : 0;\n        let top = (i * step);\n        return {'base': base, 'top': top, 'binI': i }\n    });\n   \n    let internalNodes = newNormed.map(path => path.filter(node=> node.leaf != true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            if(i === 0){\n                return node.edgeLength === 0;\n            }else{\n                return node.edgeLength > n.base && node.edgeLength <= n.top;\n            }\n        } ));\n        n.data = edges;\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n     \n        let mapNorm = normBins.map(bin => {\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = bin.data = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        })\n   \n        if(scale.type === 'continuous'){\n            let max = d3.max(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n            let min = d3.min(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n            let x = d3.scaleLinear().domain([min, max]).range([0, height])\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.forEach(n=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                return n;\n            });\n       \n        }else{\n            mapNorm.bins = null\n        }\n        let newK = {'key': key, 'branches': mapNorm, 'type': scale.type }\n      \n        return newK;\n    });\n\n    console.log(sortedBins)\n\n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n    svg.attr('height', (keys.length * (height + 5)));\n\n    let branchScale = d3.scaleLinear().domain([0, medBranchLength]).range([0, 780]);\n\n    let wrap = svg.append('g').classed('summary-wrapper', true);\n    wrap.attr('transform', 'translate(10, 0)');\n\n    let binnedWrap = wrap.selectAll('.attr-wrap').data(sortedBins).join('g').attr('class', d=> d.key + ' attr-wrap');\n    binnedWrap.attr('transform', (d, i)=>  'translate(0,'+(i * (height + 5))+')');\n    \n    let label = binnedWrap.append('text').text(d=> d.key).attr('y', 40).attr('x', 80).style('text-anchor', 'end');\n\n    let branchGroup = binnedWrap.selectAll('g.branch-bin').data(d=> {\n        ///THIS IS RIGHT\n        console.log('data before the branch bins',d);\n        return d.branches}).join('g').classed('branch-bin', true);\n \n    branchGroup.attr('transform', (d, i)=> 'translate('+(100 + branchScale(i))+')');\n\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    var lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let y = d3.scaleLinear().domain([0, 16]).range([0, height]);\n        return y(i); \n    })\n    .y0(d=> {\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 90]).clamp(true);\n        return x(0);\n    })\n    .y1(d=> {\n        let dat = Object.keys(d).length - 1\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 80]).clamp(true);\n\n        return x(dat); \n    });\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i]).selectAll('g').data([d.bins]).join('g').classed('distribution', true);\n        distrib.attr('transform', 'translate(11, 80) rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', \"rgba(133, 193, 233, .9)\");\n    })\n\n    let contRect = continDist.append('rect').attr('height', height).attr('width', 10).style('fill', 'none').style('stroke', 'gray');\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.yScale != undefined){\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return newy(d.lowerCI95) - newy(d.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.upperCI95)+')'\n    });\n    \n    /*\n\n    let xScale = d3.scaleLinear();\n    if(moveMetric === 'move'){\n        xScale.domain([0, (maxBranch - 1)]).clamp(true);\n    }else{\n        xScale.domain([0, 1]).clamp(true);\n    }\n   \n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n\n    let addMoveToAttributes = keys.map(key=> {\n            let filtered = newNormed.map(path=> {\n                return path.filter(n=> n.leaf != true);\n            });\n           \n            let maxBranches = filtered.filter(row=> row.length === maxBranch);\n            let maxMove = d3.max(maxBranches.flatMap(f=> f.flatMap(flat=> flat.edgeMove)));\n\n            let data = filtered.map(path=> {\n               \n                let prevStep = 0;\n                return path.map((node, i)=> {\n                    let attr = node.attributes[key];\n                    let lastnode = path.length - 1;\n\n                    let step = node.edgeLength + prevStep;\n                    node.edgeMove = step;\n                    prevStep = prevStep + node.edgeLength;\n\n                    if(attr.type === 'discrete'){\n                        let thisScale = xScale;\n                        thisScale.range([0, 790]);\n                        attr.move = thisScale(i);\n                        //let x = d3.scaleLinear().domain([0, maxMove]).range([0, 790]).clamp(true);\n                        attr.edgeMove = thisScale(node.edgeMove);\n                        attr.states = node.attributes[key].states.map(s=> {\n                            s.move = attr.move;\n                            s.edgeMove = attr.edgeMove;\n                            return s;\n                        });\n                    }else{//continuous///\n                        let thisScale = xScale;\n                        thisScale.range([0, 790]);\n                        let metric = function(index, max){\n                            if(index < lastnode){\n                                return thisScale(index);\n                            }else{\n                                return thisScale(max - 1);\n                            }\n                        };\n                       attr.move = metric(i, maxBranch);\n                    \n                       let x = d3.scaleLinear().domain([0, maxMove]).range([0, 790]).clamp(true);\n                       attr.edgeMove = x(node.edgeMove);\n                    }\n                    return attr;\n                });\n            });\n            data.attKey = key;\n            return data;\n    });\n\n    let summarizedData = addMoveToAttributes.map(attr=> {\n       \n        if(attr[0][0].type === 'discrete'){\n            \n           // let binCount = d3.max(attr.map(row=> row.length));\n            let moveMap = attr.filter(row=> row.length === maxBranch)[0];\n        \n            let stateKeys = attr[0][0].states.map(s=> s.state);\n            let distrib = {};\n            distrib.stateData = {};\n            stateKeys.forEach(key => {\n              \n                 let distribution = Array(maxBranch).fill({'data':[]}).map((u, i)=> {\n                     let newOb = {'data': u.data};\n                     newOb.move = moveMap[i].move;\n                     newOb.edgeMove = moveMap[i].edgeMove;\n                     return newOb;\n                 });\n                 attr.forEach((row)=> {\n                     let test = row.filter(r=> r.leaf != true).map(node=> node.states.filter(s=> s.state === key)[0]);\n                     test.forEach((t, i)=> {\n                         let newT = t;\n                         distribution[i].data.push(newT);\n                    });\n                 });\n                 \n                 distrib.stateData[key] = {};\n                 let data = distribution.map(drow=> {\n                     let filtered = drow.data.filter(d=> {\n                         return d.move === drow.move;});\n                     return filtered;\n                 });\n                 \n                 let color = data[0][0].color;\n               \n                 let thisScale = [...scales].filter(f=> f.field == attr.attKey)[0].scales.filter(f=> f.scaleName == key)[0].yScale;\n            \n                 thisScale.range([0, 80]);\n                 thisScale.clamp(true);\n               \n                 let realMean = data.map(branch=> d3.mean(branch.map(b=> b.realVal)));\n                 let realStDev = data.map(branch=> d3.deviation(branch.map(b=> b.realVal)));\n                 let realStUp = realMean.map((av, i)=> av + realStDev[i]);\n                 let realStDown = realMean.map((av, i)=> av - realStDev[i]);\n     \n                let scaleMean = data.map(branch=> d3.mean(branch.map(b=> thisScale(b.realVal))));\n                let scaleStDev = data.map(branch=> d3.deviation(branch.map(b=> thisScale(b.realVal))));\n                let scaleStUp = scaleMean.map((av, i)=> av + scaleStDev[i]);\n                let scaleStDown = scaleMean.map((av, i)=> av - scaleStDev[i]);\n                let x = d3.scaleLinear().range([0, 790]).domain([0, 1]);\n                let moves = distribution.map(d=> {\n                    let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n                    return distance; });\n\n                let final = moves.map((m, j)=> {\n                     return {\n                         'x': m,\n                         'realMean': realMean[j],\n                         'realStDev': realStDev[j],\n                         'realStUp': realStUp[j],\n                         'realStDown': realStDown[j],\n                         'scaleMean': scaleMean[j],\n                         'scaleStDev': scaleStDev[j],\n                         'scaleStUp': scaleStUp[j],\n                         'scaleStDown': scaleStDown[j],\n                        };\n                 });\n\n                 console.log('final', final);\n                 console.log('distribution', distribution);\n                 console.log('distrib', distrib);\n\n                 distrib.stateData[key].pathData = final;\n                 distrib.stateData[key].color = color;\n\n             });\n             distrib.attKey = attr.attKey;\n             distrib.type = 'discrete';\n             return distrib;\n        }else{\n            attr.type = 'continuous';\n            let thisScale = [...scales].filter(f=> f.field == attr.attKey)[0].yScale;\n            thisScale.range([0, 80]);//.scales.filter(f=> f.scaleName == key)[0].yScale;\n            thisScale.clamp(true);\n            let newScale = attr.map(row=> {\n                return row.map(n=> {\n                    n.scaleVal = thisScale(n.realVal);\n                    n.scaledHigh = thisScale(n.upperCI95);\n                    n.scaledLow = thisScale(n.lowerCI95);\n                    return n;\n                });\n            });\n          \n            newScale.type = 'continuous';\n            newScale.attKey = attr.attKey;\n            return newScale;\n        }\n    });\n\n    ////data for observed traits////\n    let observed = keys.map(key=> {\n        let leaves = newNormed.map(path=> {\n            return path.filter(n=> n.leaf === true)[0];\n        });\n\n        let data = leaves.map(leaf=> {\n            let attr = leaf.attributes[key];\n            if(attr.type === 'continuous'){\n                return attr.realVal;\n            }else if(attr.type === 'discrete'){\n                return attr.winState;\n            }else{\n                console.error('attribute type not found');\n            }\n        });\n\n        if(leaves[0].attributes[key].type === 'discrete'){\n            let colorScales = scales.filter(f=> f.field === key)[0].stateColors;\n            let stateCategories = leaves[0].attributes[key].states.map(m=> m.state);\n            let states = stateCategories.map(st=> {\n                let color = colorScales.filter(f=> f.state == st)[0].color;\n                let xScale = d3.scaleLinear().domain([0, stateCategories.length-1]);\n            \n                return {'key': st, 'count': data.filter(f=> f === st).length, 'x': xScale, 'color': color };\n            });\n            let max = d3.max(states.map(m=> m.count));\n            states.forEach(state=> {\n                state.max = max;\n                state.y = d3.scaleLinear().domain([0, max + 10]);\n            });\n            return states;\n        }else{\n   \n            let colorScales = scales.filter(f=> f.field === key)[0].catColor;\n            \n            var max = d3.max(data);\n            var min = d3.min(data);\n\n            let x = d3.scaleLinear().range([0, width]);\n            x.domain([0, 10]);\n\n            let y = d3.scaleLinear()\n            .range([height, 0]);\n\n             var histogram = d3.histogram()\n             .value(d=> d)\n             .domain([min, max])\n             .thresholds(x.ticks(10));\n\n            var bins = histogram(data);\n\n            let maxY = d3.max(bins.map(m=> m.length));\n            y.domain([0, maxY]);\n            \n            let newBins = bins.map(h=> {\n                h.x = x;\n                h.y = y;\n                h.color = colorScales;\n                return h;\n            });\n\n           return newBins;\n        };\n    });\n\n    let combinedData = observed.map((ob, i)=> {\n        return {'observed': ob, 'predicted': summarizedData[i]};\n    });\n\n\n    let attributeGroups = svg.selectAll('.combined-attr-grp').data(combinedData).join('g').classed('combined-attr-grp', true);\n    attributeGroups.attr('transform', (d, i)=> 'translate(0,'+(i * 110)+')');\n\n    let predictedAttrGrps = attributeGroups.append('g').classed('summary-attr-grp', true);\n\n    let innerTime = predictedAttrGrps.append('g').classed('inner-attr-summary', true);\n    innerTime.attr('transform', 'translate(105, 0)');\n    innerTime.append('line').attr('x1', 0).attr('y1', 40).attr('x2', 800).attr('y2', 40).attr('stroke', 'gray').attr('stroke-width', 0.5);\n    let attrRect = innerTime.append('rect').classed('attribute-rect-sum', true);\n    attrRect.attr('x', 0).attr('y', 0).attr('height', 80).attr('width', 800);\n    let label = predictedAttrGrps.append('text').text(d=> d.predicted.attKey);\n    label.attr('x', 100).attr('y', 25).attr('text-anchor', 'end');\n    let cont = innerTime.filter(f=> f.predicted.type === 'continuous');\n\n    //////////experimenting with continuous rendering///////////////////////////////\n    let contpaths = cont.selectAll('g.summ-paths').data(d=> d.predicted).join('g').classed('summ-paths', true);\n   // contpaths = contEnter.merge(contpaths);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        if(moveMetric === 'move'){return d.move;}\n        else{return d.edgeMove; }})\n    .y(d=> d.scaleVal);\n\n    let line = contpaths.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line-sum\")\n    .style('stroke', (d)=> d[0].color);\n\n    let nodes = contpaths.selectAll('.node-sum').data(d=> d).join('g').attr('class', 'node-sum');\n    nodes.attr('transform', (d, i) => {\n        if(moveMetric === 'move'){\n            return 'translate('+ d.move +', 0)';\n        }else{\n            return 'translate('+ d.edgeMove +', 0)';\n        }\n    });\n    nodes.append('rect').attr('x', 0).attr('y', 0).attr('width', 10).attr('height', 80).classed('inner-node-wrap', true);\n    nodes.append('rect').attr('x', 0).attr('y', (d, i)=> d.scaledLow).attr('width', 10).attr('height', (d, i)=> {\n        return (d.scaledHigh - d.scaledLow);\n    }).classed('range-rect-sum', true).style('fill', d=> d.color);\n    svg.attr('height', (summarizedData.length * 120));\n\n    //////////experimenting with discrete rendering///////////////////////////////\n    let disc = innerTime.filter(f=> f.predicted.type === 'discrete').classed('discrete-sum', true);\n\n    let stateGroups = disc.selectAll('.state-sum').data(d=> Object.entries(d.predicted.stateData).map(m=> m[1])).join('g').classed('state-sum', true);\n  //  stateGroups = stateEnter.merge(stateGroups);\n\n    var lineGenD = d3.line()\n    .x(d=> d.x)\n    .y(d=> d.scaleMean);\n\n    let lineD = stateGroups.append('path')\n    .attr(\"d\", d=> lineGenD(d.pathData))\n    .attr(\"class\", \"inner-line-sum-discrete\")\n    .style('stroke', (d, i)=> {\n        return d.color;\n    });\n\n    let area = d3.area()\n    .x(d => {\n        console.log(d);\n        return d.x;})\n    .y0(d => d.scaleStDown)\n    .y1(d => d.scaleStUp);\n    \n    let areaG =   stateGroups.append(\"path\")\n    .attr(\"fill\", d=> d.color)\n    .attr(\"d\", d=> {\n        console.log(d.pathData);\n        return area(d.pathData);})\n    .classed('state-area-sum', true);\n\n    let observedGroup = attributeGroups.append('g').classed('observed-att', true);\n    observedGroup.attr('transform', 'translate(920, 0)');\n    observedGroup.append('rect').attr('width', 200).attr('height', 80).attr('x', 0).attr('y', 0).classed('wrapper-rect', true);\n\n    /////////OBSERVED DISCRETE RENDERING///////////////////////\n    let observedDiscrete = observedGroup.filter(f=> f.predicted.type === 'discrete');\n  \n    let stateBars = observedDiscrete.selectAll('.state-bar').data(d=> d.observed).join('g').classed('state-bar', true);\n   // stateBars = rectBarEnter.merge(stateBars);\n\n    stateBars.attr('transform', (d, i)=> {\n        d.x.range([0, 180]);\n        console.log('d', d);\n        return 'translate('+ d.x(i)+ ',0)';\n    });\n\n    let stateRects = stateBars.append('rect').classed('graph-bars', true);\n   \n    stateRects.attr('x', 0)\n        .attr('height', (d, i)=> {\n            let scale = d3.scaleLinear().domain([0, d.max + 10]).range([80, 0]);\n            return scale(0) - scale(d.count);\n        }).attr('y', (d, i)=> {\n            let scale = d3.scaleLinear().domain([0, d.max + 10]).range([0, 80]);\n            let move = 80 - (scale(d.count));\n            return move;\n        }).attr('width', 20).style('fill', d=> d.color);\n\n    let labelsG = stateBars.append('g').attr('transform', 'translate(0, 80)');\n    let labels = labelsG.append('text').text(d=> d.key);\n    labels\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.1em\")\n    .attr(\"dy\", \".8em\")\n    .style('font-size', 9)\n    .attr(\"transform\", \"rotate(-35)\");\n\n    //NEED TO FINISH THIS\n\n    /////////OBSERVED Continuous RENDERING///////////////////////\n    let observedContinuous = observedGroup.filter(f=> f.predicted.type === 'continuous');\n\n    let binBars = observedContinuous.selectAll('.bin-bar').data(d=> d.observed).join('g').classed('bin-bar', true);\n\n    // append the bar rectangles to the svg element\n    \n    binBars.append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function(d, i) {\n            return \"translate(\" + d.x(i) + \",\" + d.y(d.length) + \")\"; })\n     //   .attr(\"width\", function(d) { return d.x(d.x1) - d.x(d.x0) -1 ; })\n        .attr(\"width\", 10)\n        .attr(\"height\", function(d) { return height - d.y(d.length); })\n        .attr('fill', (d)=> d.color);\n  /*\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n  \n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n*/\n}\n","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport {drawPathsAndAttributes} from './rendering';\nimport {toggleFilters} from './filterComponent';\nimport {renderDistibutions} from './distributionView';\nimport {dataMaster, collapsed} from './index';\n\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, moveMetric, pathView){\n\n    console.log('collapsing?', collapsed);\n\n    let viewButton = toolbar.append('button').attr('id', 'view-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n\n    if(pathView === 'paths'){\n        viewButton.text('View Summary');\n    }else if(pathView === 'summary'){\n        viewButton.text('View Paths');\n    }else{\n        console.error('pathView parameter not found');\n    }\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, normedPaths, main, moveMetric, calculatedScales));\n\n    let lengthButton = toolbar.append('button').attr('id', 'change-length').attr('class', 'btn btn-outline-secondary');\n    if(moveMetric === 'move'){\n        lengthButton.text('Show Edge Length');\n    }else if(moveMetric === 'edgeLength'){\n        lengthButton.text('Normalize Edge Length');\n    }\n\n    lengthButton.on('click', ()=> {\n        if(lengthButton.text() === 'Show Edge Length'){\n            lengthButton.text('Normalize Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n            }else{\n                renderDistibutions(normedPaths, main, calculatedScales, 'edgeLength');\n            }\n        }else{\n            lengthButton.text('Show Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n            }else{\n                renderDistibutions(normedPaths, main, calculatedScales, moveMetric);\n            }\n        }\n    });\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, normedPaths, main, calculatedScales));\n    viewButton.on('click', ()=> togglePathView(viewButton, normedPaths, main, calculatedScales, moveMetric));\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, normedPaths, main, calculatedScales){\n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n    }\n}\n\n/**\n * \n * @param {*} viewButton button that changes the actual view the text of the button determines what the view should change to \n * @param {*} normedPaths \n * @param {*} main \n * @param {*} calculatedScales \n */\nfunction togglePathView(viewButton, normedPaths, main, calculatedScales, moveMetric){\n   \n    if(viewButton.text() === 'View Paths'){\n        viewButton.text('View Summary');\n        main.selectAll('*').remove();//.selectAll('*').remove();\n        drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n    }else{\n        viewButton.text('View Paths');\n        main.selectAll('*').remove();\n        renderDistibutions(normedPaths, main, calculatedScales, moveMetric);\n    }\n}\n\n\n\n\n\n","import * as d3 from \"d3\";\nimport {branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes} from './rendering';\nimport {formatAttributeData} from './dataFormat';\nimport {renderAttToggles} from './toolbarComponent';\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function pathSelected(selectedPath, otherPaths, scales, moveMetric){\n\n    let selectedDiv = d3.select('div#selected');\n    if(selectedPath === null){\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, moveMetric, false);\n    }else{\n        renderSelectedView([selectedPath], otherPaths, selectedDiv, scales, moveMetric);\n        let sortedPaths = sortOtherPaths([...selectedPath], otherPaths);\n        let main = d3.select('div#main');\n          /// LOWER ATTRIBUTE VISUALIZATION ///\n        drawPathsAndAttributes(sortedPaths.map(s=> s.data), main, scales, moveMetric, false);\n  \n        main.style('padding-top', '250px');\n    }\n}\nexport function sortOtherPaths(pathData, otherPaths){\n\n    let thisSpecies = pathData.filter(f=> f.leaf)[0];\n    let chosenPath = pathData.reverse().map(m=> m.node);\n    \n    let rankedPaths = otherPaths.map(path=> {\n        let step = 0;\n        let test = path.reverse().map((node, i)=> {\n            if(chosenPath.indexOf(node.node));\n            return {'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n        }).filter(f=> f.indexOf > -1);\n        let distance = (test[0].indexOf + test[0].pathIndex);\n        return {'data':path.reverse(), 'distance': distance };\n\n    });\n    let sortedData = rankedPaths.sort(function(a, b){return a.distance - b.distance;});\n    return sortedData;\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales, moveMetric){\n\n    let selectedSpecies = pathData.flatMap(p=> p.filter(f=> f.leaf === true).map(n=> n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node=> selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n   ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc=> {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m=> m.field) : null;\n\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    let xIconWrap = selectedTool.append('div').classed('x-icon', true);\n    let xIcon = xIconWrap.append('i').classed(\"far fa-times-circle\", true);\n    xIcon.on('click', ()=> {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        \n        pathSelected(null, dataMaster[0], scales, moveMetric);\n    });\n\n    ///////////////////////\n\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', ()=> sortPaths(sortByDistanceButton));\n    \n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m=> m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n   let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n   let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d=> d).attr('id', (d, i)=> 'radio-'+i).classed(\"form-check-input\", true);\n   radioDiv.append('label').text(d=> d).property('for', (d, i)=> 'radio-'+i).classed(\"form-check-label\", true);\n\n   radio.on('click', (d, i)=> {\n    let leaf = pathData.map(node=> node.filter(d=> d.leaf === true)[0])[0];\n    let sorted = [...otherPaths].sort(function(a, b){\n        return a.filter(n=> n.leaf === true)[0].attributes[d].realVal - b.filter(n=> n.leaf === true)[0].attributes[d].realVal;\n    });\n\n    let main = d3.select('div#main');\n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n    main.style('padding-top', '250px');\n\n    let paths = main.select('svg#main-path-view').selectAll('.paths');\n\n    let high = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n    });\n    high.classed('high', true);\n\n    let highLeaves = high.data().map(path=> path.filter(f=> f.leaf === true)[0].node);\n    \n    treeNodes.filter(f=> highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n\n    let low = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n    });\n    low.classed('low', true);\n\n    let lowLeaves = low.data().map(path=> path.filter(f=> f.leaf === true)[0].node);\n\n    treeNodes.filter(f=> lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n\n    let same = paths.filter(path=> {\n        let leafOther = path.filter(node=> node.leaf === true)[0];\n        return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n    });\n    same.classed('same', true);\n});\n   /////////////////////////////////////////////////\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty()? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    let selectWrap = svg.append('g').classed('select-wrap', true);\n\n    let selectedGroups = renderPaths(pathData, selectWrap, scales, moveMetric);\n    selectedGroups.attr('transform', (d, i)=> 'translate(0,'+(i*60)+')');\n\n    let nodes = selectedGroups.select('.time-line').selectAll('.node');\n    nodes.on('mouseover', (d, i)=> {\n      \n        let nearest = otherPaths.filter(path=> {\n            let nodearray = path.flatMap(f=> f.node);\n            return nodearray.indexOf(d.node) > -1;\n        });\n       \n        let nearestA = nearest[0];\n        let nearestB = nearest[1];\n    });\n\n    //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n       /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n    let attData = formatAttributeData(pathData, scales, attrFilter);\n    let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n      \n    let attributeHeight = 45;\n    selectedGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (Object.keys(d[1].attributes).length + 1))) +')');\n    \n    drawContAtt(attributeGroups);\n    drawDiscreteAtt(attributeGroups, scales);\n\n    //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n    //tranforming elements\n    svg.style('height', ((pathData.length + attributeGroups.data().map(m=> m[0]).length)* 250) + 50 + 'px');\n    selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m=> m[0]).length)* 45) + 50 + 'px');\n    attributeWrapper.attr('transform', (d)=> 'translate(140, 25)');\n\n    d3.selectAll('.selected-path').classed('selected-path', false);\n\n    ////NEED TO GENERALIZE BRANCH FUNCTION IN RENDER TO WORK HERE\n\n    return svg;\n}\n\nfunction sortPaths(sortButton){\n    if(sortButton.text() === 'Sort Most to Least'){\n        sortButton.text('Sort Least to Most');\n    }else{\n        sortButton.text('Sort Most to Least');\n    }\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {renderSelectedView, pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric){\n\n    \n    let collapsed = d3.select('#scrunch').attr('value');\n    console.log('filter master', filterMaster)\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(normedPaths, main, calculatedScales, moveMetric);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let attData = formatAttributeData(normedPaths, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (attrMove + 1))) +')');\n    \n    drawContAtt(predictedAttrGrps, moveMetric, collapsed);\n    drawDiscreteAtt(predictedAttrGrps, calculatedScales, moveMetric, collapsed);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, normedPaths, (attrMove * attributeHeight))\n\n}\n\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\n\nexport function renderPaths(pathData, main, scales, moveMetric){\n    \n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n     let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n \n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n    pathGroups.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales, moveMetric);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected(d, notIt.data(), scales, moveMetric);\n        }\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       // let string = d[d.length - 1].label\n       let string = d.filter(f=> f.leaf === true)[0].label;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 10).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> d).join('g').classed('node', true);\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 10)';});\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n      \n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n  \n}\n\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> data[i]).join('g');\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n    return predictedAttrGrps;\n}\n\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\n\nasync function continuousPaths(innerTimeline, moveMetric, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path, moveMetric);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? 20 : 45;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\n\nexport function drawContAtt(predictedAttrGrps, moveMetric, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return d[0].type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? 20 : 45;\n    let attrLabel = continuousAtt.append('text').text(d=> d[0].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);//.data(normedPaths);//.attr('transform', (d, i)=> 'translate(0, 0)');\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n   // attributeNodesCont = attrNodesContEnter.merge(attributeNodesCont);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, moveMetric, collapsed);\n ////////\n\n    let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    innerRect.attr('height', attributeHeight);\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', 20).attr('height', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.lowerCI95) - y(d.upperCI95);\n        let barHeight = (collapsed === 'true') ? 20 : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', 20).attr('height', 5)\n        .attr('transform', (d, i)=> {\n            let y = d.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.realVal) +')';})\n        .attr('fill', d=> d.color);\n    }\n   \n}\n\nexport function drawDiscreteAtt(predictedAttrGrps, scales, moveMetric, collapsed){\n\n    console.log('collapsed in draw discrete', collapsed, d3.select('#scrunch').attr('value'))\n    \n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let attrLabel = discreteAtt.append('text').text(d=> d[d.length - 1].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        let disct = d.map(m=> {\n           \n            let test = (m.leaf == true) ? m.states.map(s=> {\n                s.move = m.move;\n                s.edgeMove = m.edgeMove;\n                s.color = m.color;\n                return s;\n            }) : m;\n            return test;\n        });\n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n            return disct.map(m=> m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n   // statePath = pathEnter.merge(statePath);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance + 7;})\n    .y(d=> {\n       \n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        //d.scaleVal\n        return y(d.realVal);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;});\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);//.data(normedPaths);//.attr('transform', (d, i)=> 'translate(0, 0)');\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g').classed('attribute-node-discrete', true);\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        if(d[0]){\n            let distance = (moveMetric === 'move') ? d[0].move : x(d[0].edgeMove);\n            return 'translate('+distance+', 0)';\n        }else{\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n    let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n        return d;\n    }).join('circle').classed('dots', true);\n    \n    stateDots.attr('cx', 10).attr('cy', (d)=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n        return y(d.realVal);\n    }).attr('r', 2).style('fill', d=> d.color);\n\n    stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n\n    stateDots.on(\"mouseover\", function(d) {\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html(d.state + \": \" + f(d.realVal))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        })\n      .on(\"mouseout\", function(d) {\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n        });\n\n    let endStateDot = attributeNodesDisc.filter((att, i)=> {\n        return att[0] === undefined;});\n\n    endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n       return d.color;\n    });\n    ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n\n    endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(15, 17)').style('font-size', 10);\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {renderSelectedView, pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {drawPathsAndAttributes} from './rendering';\nimport {dataMaster} from './index';\nimport {filterMaster} from './filterComponent';\n\nfunction getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges.rows);\n    return nestedData;\n}\n\nfunction updateBrush(){\n    let sidebar = d3.select('#sidebar');\n    let main = d3.select('#main');\n    let toolbarDiv = d3.select('#toolbar');\n\n    let nodes = sidebar.select('svg').select('g').selectAll('.node');\n    let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n\n    let filterArray = selectedNodes.data().map(n=> n.data.node);\n  \n    let test = treeFilter(normedPaths, filterArray);\n\n    let filterOb = {'filterType': 'data-filter', 'attribute-type': 'topology', 'filterFunction':treeFilter, 'before-data': [...normedPaths], 'data': [...test]}\n    filterMaster.push(filterOb);\n\n    drawPathsAndAttributes(test, main, calculatedScales, 'edgeLength');\n     ///DIMMING THE FILTERED OUT NODES//////\n\n    ////Class Tree Links////\n    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n    d3.selectAll('.link-not-there').classed('link-not-there', false);\n    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingLinks.classed('link-not-there', true);\n\n    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingNodes.classed('node-not-there', true);\n\n    ///END NODE DIMMING///////\n\n    let button = toolbarDiv.append('button').classed('btn btn-info', true);\n    let span = button.append('span').classed('badge badge-light', true);\n    span.text(test.length);\n    let label = button.append('h6').text('Tree Filter');\n    let xSpan = label.append('i').classed('close fas fa-times', true);\n    xSpan.on('click', async ()=> {\n        await drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n        d3.selectAll('.selected').classed('selected', false);\n        d3.selectAll('.link-not-there').classed('link-not-there', false);\n        d3.selectAll('.node-not-there').classed('node-not-there', false);\n        button.remove();\n        d3.select(this).call(treeBrush.move, null);\n    });\n}\n\nexport function renderTreeButtons(nestedData, normedPaths, calculatedScales, sidebar){\n    ///SIDBAR STUFF\n    let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n\n    treeButton.on('click', ()=> {\n        treeBrush.on('end', updateBrush);\n        let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Show Lengths').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n       // treeBrush.on('end', updateBrush);\n       // let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n       console.log('renderTree')\n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n           renderTree(nestedData, normedPaths, calculatedScales, sidebar, true);\n           treeViewButton.text('Hide Lengths');\n       }else{\n        renderTree(nestedData, normedPaths, calculatedScales, sidebar, false);\n        treeViewButton.text('Show Lengths');\n       }\n    });\n}\n\nexport function renderTree(nestedData, normedPaths, calculatedScales, sidebar, length){\n\n    let treeBrush = d3.brush().extent([[0, 0], [400, 600]]);\n\n    function treeFilter(data, selectedNodes){\n        return data.filter(path=> {\n            let nodeNames = path.map(no=> no.node);\n            let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n            return booArray.indexOf(true) > -1\n        });\n    }\n\n    // set the dimensions and margins of the diagram\n    var margin = {top: 10, right: 90, bottom: 50, left: 20},\n    width = 400 - margin.left - margin.right,\n    height = 700 - margin.top - margin.bottom;\n\n// declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([height, width]);\n  //  console.log('nested', nestedData)\n    function addingEdgeLength(edge, data){\n        data.combEdge = data.edgeLength + edge;\n        if(data.children){\n            data.children.forEach(chil=> {\n                addingEdgeLength(data.combEdge, chil);\n            });\n        }\n    }\n    addingEdgeLength(0, nestedData)\n  //  console.log('new nested', nestedData);\n//  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData);\n\n// maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, width]).clamp(true);\n\n    var treeSvg = sidebar.append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom),\n    g = treeSvg.append(\"g\")\n    .attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// adds the links between the nodes\n    var link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", function(d) {\n        if(length){\n            return \"M\" + xScale(d.data.combEdge) + \",\" + d.x\n            + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.x\n            + \" \" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.parent.x\n            + \" \" + xScale(d.parent.data.combEdge) + \",\" + d.parent.x;\n        }else{\n            return \"M\" + d.y + \",\" + d.x\n            + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n            + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n            + \" \" + d.parent.y + \",\" + d.parent.x;\n        }\n        /*\n        return \"M\" + d.y + \",\" + d.x\n        + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n        + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n        + \" \" + d.parent.y + \",\" + d.parent.x;\n        */\n       \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants())\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); })\n    .attr(\"transform\", function(d) { \n   \n        if(length){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + d.x + \")\"; \n        }else{\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; \n        }\n    \n    //return \"translate(\" + d.y + \",\" + d.x + \")\"; \n});\n\n    // adds the circle to the node\n    node.append(\"circle\")\n    .attr(\"r\", 3);\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n    });\n\n    return node;\n/////END TREE STUFF\n///////////\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, matchLeaves, matchEdges, normPaths, filterKeeper} from './dataFormat';\nimport {allPaths, pullPath, getPath} from './pathCalc';\nimport {drawPathsAndAttributes} from './rendering';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {renderDistibutions} from './distributionView';\nimport {toolbarControl, renderAttToggles} from './toolbarComponent';\n\nexport const dataMaster = [];\nexport const collapsed = false;\n\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\n\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n\nloadData(d3.json, './public/data/anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edgeLen = await loadData(d3.json, './public/data/anolis-edge-length.json', 'edge');\n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.V1);\n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.V2) == -1 );\n\n    let leafChar = await loadData(d3.json, './public/data/anolisLeafChar.json', '');\n\n    let labels = await loadData(d3.json, './public/data/anolis-labels.json', '');\n\n\n    ///MAKE A ESTIMATED SCALES THING\n    let calculatedAtt = {\n        'awesomeness' : await loadData(d3.json, './public/data/anolis-awesomeness-res.json', 'continuous'),\n        'island' : await loadData(d3.json, './public/data/anolis-island-res.json', 'discrete'),\n        'SVL' : await loadData(d3.json, './public/data/anolis-svl-res.json', 'continuous'),\n        'ecomorph': await loadData(d3.json, './public/data/anolis-ecomorph-res.json', 'discrete'),\n    }\n\n    let colorKeeper = [\n        ['#0dc1d1', '#c8f7fd'],\n        ['#3AD701', '#2a9b01'],\n        ['#fec303', '#d3a001'],\n        ['#fe4ecb', '#d30197'],\n        ['#f36b2c'],\n        ['#1abc9c'],\n        ['#493267'],\n        ['#a40b0b'],\n        ['#0095b6'],\n    ]\n\n    ////CALCULATE THE SCALES FOR EACH ATTRIBUTE////////\n    let calculatedScales = calculateScales(calculatedAtt, colorKeeper);\n\n    ///MATCH LEAF CHARACTERS AND LABELS TO LEAVES///\n    let matchedLeaves = matchLeaves(labels, leaves, leafChar, calculatedScales);\n\n    //MATCH CALC ATTRIBUTES TO EDGES///\n    let matchedEdges = matchEdges(edges, edgeLen, calculatedAtt, calculatedScales);\n\n    ///CALCULATES PATHS FROM THE DATA////\n    let paths = allPaths(matchedEdges, matchedLeaves, \"V1\", \"V2\");\n \n   let normedPaths = normPaths(paths, calculatedAtt, calculatedScales);\n\n   dataMaster.push(normedPaths);\n   \n   // renderDistibutions(normedPaths, main, calculatedScales);\n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'edgeLength', 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    ////////TREE RENDER IN SIDEBAR////////\n    let nestedData = buildTreeStructure(paths, edges);\n\n    renderTreeButtons(nestedData, normedPaths, calculatedScales, sidebar, false);\n\n    let tree = renderTree(nestedData, normedPaths, calculatedScales, sidebar, false);\n    ////Render the summary distributions////\n    //renderDistibutions(normedPaths, main, calculatedScales, 'move');\n    \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n});\n/*\nloadData(d3.json, './public/data/geospiza_with_attributes.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    //console.log('pa',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/geospiza_loop_all_asr_features.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('pa RICH',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/anolis_rich_ASR_pad_vs_tail.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('anolis RICH',pathArray);\n});*/\n\n\n\n\n"],"sourceRoot":""}